## What to track?

::: {style="text-align: center;"}
**Can you identify the reasoning underlying each of the following pieces of advice?**
:::

<br/>

:::: {.columns}

::: {.column width="50%"}
- Track:

  + source code (e.g., scripts).
  
  + README file(s)
  
  + LICENSE file, if any

<br/>
  
- Optionally track:

  + `.gitignore` file(s)
  
  + Configuration file(s)

<br/>

- Do not track output files.
:::

::: {.column width="50%"}
- Do not track very large files (e.g., data).

  + Use [git-lfs](https://git-lfs.github.com/) if you must.

  + Host elsewhere
  (e.g.,
  [figshare](https://figshare.com/),
  [zenodo](https://zenodo.org/)).
  
  + Download data at runtime.

<br/>

- Do not track confidential information

  + e.g., login, passwords
:::

::::

## Revert changes

The `git revert` sub-command can be used to undo everything that was done in a particular commit, without the need to edit any of the files manually.

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 700px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-revert.svg")
```

## Reset the commit history

The `git reset` sub-command can be used to reset the history of the repository
to an earlier commit, deleting every subsequent commit.

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 800px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-reset.svg")
```

## Branches of history

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 500px
## Source: https://swcarpentry.github.io/git-novice/01-basics/index.html
knitr::include_graphics("img/carpentries-versions.svg")
```
:::

::: {.column width="50%"}
So far, your repository has followed a linear timeline.

What if:

- You want to write (and test) two mutually exclusive changes to your code,
  and track those changes until you decide one to keep and one to discard.
- You need to backup work in progress while urgently fixing a bug.
- You do not want to commit draft code to the main branch of your repository.
:::

::::

Then:

- You can initiate new _branches_ in the history of your repository.

- Changes upstream of the branching point are shared; downstream changes are specific to each branch.

## Merging branches of history

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 500px
## Source: https://swcarpentry.github.io/git-novice/01-basics/index.html
knitr::include_graphics("img/carpentries-merge.svg")
```
:::

::: {.column width="50%"}
Creating branches will result in your work being spread in mutually exclusive versions of your files, e.g.

- The main branch contains the code from your latest lab meeting.
- Another branch includes code that generates a new figure.
- Another branch contains updates that fix a bug.
:::

::::

To generate a new version of your code that contains the code from your latest lab meeting,
**and** the bug fix, **and** the new figure, you need to _merge_ branches together.

Merging two branches creates a new _commit_ in the repository history.
Downstream of the merging point, the files contain the changes made in both upstream branches.

## Branching and merging

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 800px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/branch-and-merge.svg")
```

- Branching allows you to work on different things independently from each other.
- Merging combines the changes made on a branch to those made on another branch.
  + Typically, "feature" branches are merged to the main branch.
- Branches can contain any number of commits before being merged.
- Branches do not have to be merged; they can be abandoned and deleted (great for experimenting).

## Create a branch

The `git branch` sub-command can be used to inspect and create branches in a repository.

- This does not automatically synchronise remote clones of the repository.
  + You will need to _push_ those branches to the remote clones.
- You can only create branches with names that are not already used (locally).
  + You will need to delete branches if you want to re-use their names.
- The branching point is the latest commit on the current branch.

The `git checkout` sub-command is used to switch between branches.

Frequently, `git checkout -b name_of_new_branch` is used to simultaneously
create **and** switch to that new branch.

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-branch.svg")
```

## Merging a branch

The `git merge` sub-command can be used to merge two branches.

<br/>

Most frequently, "feature" branches are merged to the main branch.

```{bash, eval=FALSE, echo=TRUE}
git checkout main     # checkout the "receiving" branch
git merge new_branch  # merge the "feature" branch to the current branch
```

<br/>

This creates a new commit.
From that point, files contain the changes made in the two parent branches.

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-merge.svg")
```

## Deleting a branch

Once merged, branches should be "deleted".

```{bash, eval=FALSE, echo=TRUE}
git branch -d new_branch # safely delete
git branch -D new_branch # force delete
```

- Except the main branch!
- If the branch was merged, only the name of the branch is deleted, not the commits.
  + The commits are part of the history of the other branch.
    Thus, commits are kept as long as one branch in the repository contains them.
- If the branch was not merged, the commits on that branch are lost.

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-branch-delete.svg")
```

::: {style="text-align: center;"}
**What is the difference with the previous illustration?**
:::

The name of the branch can then be re-used to create a new branch with that name.

## Further reading

### Novice

- Software Carpentry: <https://swcarpentry.github.io/git-novice/>

### Advanced

- <i class="fab fa-git"></i> glossary: <https://git-scm.com/docs/gitglossary>
- Oh s**t <i class="fab fa-git"></i>: <https://ohshitgit.com/>

## Credits

```{r, out.height='300px'}
knitr::include_graphics("img/TheCarpentries.svg")
# Source: https://carpentries.org/
```

::: {style="text-align: center;"}
Version Control with Git

<https://swcarpentry.github.io/git-novice/>
:::

## References

```{r refs, results="asis"}
NoCite(bib, "bryan2017versioncontrol")
PrintBibliography(bib)
```

::: {.notes}
Extras:

- Install `git`
- `git init` (as opposed to `git clone`)
- `git merge` vs `git rebase`
:::