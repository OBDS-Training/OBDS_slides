---
title: 'Version control using <i class="fab fa-git"></i> and <i class="fab fa-github"></i> GitHub'
subtitle: 'Using individual repositories on the teaching cluster'
author: "Kevin Rue-Albrecht"
institute: "Oxford Biomedical Data Science Training Programme"
date: "2023-04-26 (updated: `r Sys.Date()`)"
date-format: long
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/ox_brand1_pos.gif
    css: styles.css
    fontsize: 1.5em
    footer: Kevin Rue-Albrecht -- Version control using <i class="fab fa-git"></i> and <i class="fab fa-github"></i> GitHub
# run the following line after knitting to convert HTML to PDF
# renderthis::to_pdf("index.cluster.html")
---

```{r setup, include = FALSE}
stopifnot(requireNamespace("htmltools"))
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
knitr::opts_chunk$set(
  message = FALSE, warning = FALSE, error = FALSE, include = TRUE, echo = FALSE,
  fig.align='center', out.height='500px'
)
options(width = 90)
stopifnot(require(base))
```

```{r, load_refs, include=FALSE, cache=FALSE}
options(htmltools.dir.version = FALSE)
library(RefManageR)
BibOptions(
  check.entries = FALSE,
  bib.style = "authoryear",
  cite.style = "authoryear",
  style = "markdown",
  hyperlink = "to.doc",
  dashed = TRUE)
bib <- ReadBib("bibliography.bib")
```

## Learning Goals & Objectives (CCB cluster)

### Learning goals

<!--
High-level "big picture" objectives of the learning process.
-->

- Understand what version control is and when to use it.
- Identify where git stores information.
- Practice how to record changes in <i class="fab fa-git"></i>.

### Learning objectives

<!--
More concrete and measurable outputs.
-->

- Set up an SSH key pair.
- Configure <i class="fab fa-git"></i>.
- _Initialise_ a personal repository for this course, on <i class="fab fa-github"></i> GitHub.
- _Clone_ a copy of the repository on the teaching cluster.
- Create and edit files in the repository on the teaching cluster, and _commit_ those changes.
- _Push_ your changes to the <i class="fab fa-github"></i> GitHub clone of the repository.
- Edit files on the <i class="fab fa-github"></i> GitHub clone of the repository.
- _Pull_ updates from the <i class="fab fa-github"></i> GitHub clone to the clone of the repository on the teaching cluster.
- Examine the _log_ of the shared repository, on <i class="fab fa-github"></i> GitHub and on the teaching cluster.

## Prerequisites (CCB cluster)

- A [<i class="fab fa-github"></i> GitHub](https://github.com/) account.

- An account on the teaching cluster.

## Set up (CCB cluster)

- Connect to the University VPN.

- Open a terminal application on your computer.

- Connect to the teaching cluster over SSH.

```{r, child='opening.qmd'}
```

## SSH key pairs (CCB cluster)

```{r, fig.align='center', out.height='500px', out.width='600px'}
# Source: https://note.nguyenanhung.com/
knitr::include_graphics("img/ssh-key-pair.svg")
```

::: {style="text-align: center;"}
_We need to set an SSH key pair between the teaching cluster and <i class="fab fa-github"></i> GitHub._
:::

## Exercise (CCB cluster)

### Setting up the SSH key pair

This key pair will allow your clone of the repository to push and pull code through the <i class="fab fa-github"></i> GitHub API.

- In the Terminal application, logged in the teaching cluster, create an SSH key pair.

  + `ssh-keygen -t ecdsa -b 521`
  
  + Accept the default location for the key (leave field empty and press the Return key)
  
  + _Do_ set a passphrase to protect your key pair.

- Display the public key and copy it.

  + `cat ~/.ssh/id_ecdsa.pub`

- Add the public key to your <i class="fab fa-github"></i> GitHub account.

  + <https://github.com/settings/ssh/new>

::: {style="text-align: center;"}
_(See next slides to navigate to that page more naturally.)_
:::

```{r, child='ssh-keypair-screenshots.qmd'}
```

```{r, child='get-started.qmd'}
```

```{r, child='git-configure.qmd'}
```

```{r, child='create-github-repository.qmd'}
```

## Exercise (CCB cluster)

### Clone the repository

The `git clone` sub-command takes the address of a remote repository and creates a copy of that repository in a new local directory.

```{bash, eval=FALSE, echo=TRUE}
git clone git@github.com:kevinrue/OBDS_May_2022.git
```

<br/>

:::: {.columns}

::: {.column width="50%"}
```{r, fig.align='center', out.height='300px'}
# Source: Kevin Rue-Albrecht (Adobe Illustrator)
knitr::include_graphics("img/git-clone-collaboration.svg")
```
:::

::: {.column width="50%"}
But first, create a `git` subdirectory in your personal OBDS directory and change directory.

```{bash, eval=FALSE, echo=TRUE}
mkdir /project/obds/$USER/git
cd /project/obds/$USER/git
```

Now, clone the repository into that `git` subdirectory.

<br/>

::: {style="text-align: center;"}
**Why is a `git` subdirectory best practices?**
:::
:::

::::

```{r, child='main.qmd'}
```

## Summary so far (CCB cluster)

- You have _initialised_ a repository (with a `README.md` file) on <i class="fab fa-github"></i> GitHub.

- You have made a _clone_ of the repository on the teaching cluster.

- You have _committed_ changes to files on the teaching cluster.

- You have _pushed_ those commits from the teaching cluster to <i class="fab fa-github"></i> GitHub.

- You have _committed_ changes to files on <i class="fab fa-github"></i> GitHub.

- You have _pulled_ those changes from <i class="fab fa-github"></i> GitHub to the teaching cluster.

<br/>

:::: {.columns}

::: {.column width="50%"}
```{r, fig.align='center', out.height='250px', out.width='600px'}
# Screenshot (Kevin Rue-Albrecht)
knitr::include_graphics("img/summary-workflow-pull-push.svg")
```
::::

::: {.column width="50%"}
Adding, committing, and pushing/pulling changes cover 99% of the <i class="fab fa-git"></i> commands you will use.

However, you need to be aware of other <i class="fab fa-git"></i> commands to manage and undo mistakes.
:::

::::

```{r, child='etc.qmd'}
```
