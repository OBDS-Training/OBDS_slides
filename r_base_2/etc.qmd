## Workspace management in <i class="fab fa-r-project"></i> sessions

The *workspace* is the current <i class="fab fa-r-project"></i> environment that contains all the user-defined objects (including functions) in the current session. 

As you define new objects and functions, these new objects are stored in the workspace.

When you close RStudio, you may see a message asking you "Save workspace image to .RData?"

- Agreeing saves all the objects currently in your workspace to a file on your computer;
  this is useful if you expect to restore the workspace in a later session.
- Declining discards your workspace; this is useful if you like to start <i class="fab fa-r-project"></i> with an empty, clean workspace.

<br/>

Note:

- Saving a workspace does *not* save the commands that you used to generate it.
- It is much more important to save scripts than to save workspaces.

## The working directory

The *working directory* is the location on the computer running the <i class="fab fa-r-project"></i> session relative to which commands are evaluated.

- Some commands are not affected by the working directory.

Any *relative* file path given to a command will be relative to the working directory, e.g.

```{r}
#| eval: false
#| echo: true
my_data <- read.csv(file = "data.csv")
```

Any *absolute* file path given to a command will *not* be impacted by the working directory, e.g.

```{r}
#| eval: false
#| echo: true
write.csv(x = my_data, file = "/project/obds/shared/data.csv")
```

The current working directory can be displayed using the function `getwd()`, e.g.

```{r}
#| eval: false
#| echo: true
getwd()
```

The working directory can be set using the function `setwd()`, e.g.

```{r}
#| eval: false
#| echo: true
setwd("/project/obds/shared")
```

<br/>

Note:

- The *working directory* is a location in the computer's *filesystem* (i.e., hard drive).
- The *workspace* is an environment in the computer's *memory* (i.e., RAM).

## Saving and loading workspaces

It is possible to store one or more objects from the workspace to an `.RData` file.

The `save()` function writes an external representation of <i class="fab fa-r-project"></i> objects to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save(a, b, file = "workspace.RData")
```

The file can only be read using the `load()` function to restore those objects into an <i class="fab fa-r-project"></i> session.
It is not possible to read that type of file with any other program.

```{r}
#| eval: false
#| echo: true
load("workspace.RData")
```

Note:

- The objects are restored under their original name in the workspace where they were saved, overwriting any object with the same name in the workspace where they are restored. Beware!

The function `save.image()` takes only a file path and writes *all* the objects in the workspace to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save.image(file = "workspace.RData")
```

## Saving and loading individual objects

<br/>

The function `saveRDS()` saves a a single object to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
saveRDS(object = a, file = "a.rds")
```

<br/>

The function `readRDS()` imports an object saved in an RDS file, e.g.

```{r}
#| eval: false
#| echo: true
a_restored <- readRDS(file = "a.rds")
```

<br/>

Note:

- The object is saved to the file *without* its name.
- The object can be assigned to a name, which can be the original name of the object or a new one.
- If not assigned, the object is simply printed in the <i class="fab fa-r-project"></i> console.
