## Workspace management in <i class="fab fa-r-project"></i> sessions

The *workspace* is the current <i class="fab fa-r-project"></i> environment that contains all the user-defined objects (including functions) in the current session. 

As you define new objects and functions, these new objects are stored in the workspace.

When you close RStudio, you may see a message asking you "Save workspace image to .RData?"

- Agreeing saves all the objects currently in your workspace to a file on your computer;
  this is useful if you expect to restore the workspace in a later session.
- Declining discards your workspace; this is useful if you like to start <i class="fab fa-r-project"></i> with an empty, clean workspace.

<br/>

Note:

- Saving a workspace does *not* save the commands that you used to generate it.
- It is much more important to save scripts than to save workspaces.

## The working directory

The *working directory* is the location on the computer running the <i class="fab fa-r-project"></i> session relative to which commands are evaluated.

- Some commands are not affected by the working directory.

Any *relative* file path given to a command will be relative to the working directory, e.g.

```{r}
#| eval: false
#| echo: true
my_data <- read.csv(file = "data.csv")
```

Any *absolute* file path given to a command will *not* be impacted by the working directory, e.g.

```{r}
#| eval: false
#| echo: true
write.csv(x = my_data, file = "/project/obds/shared/data.csv")
```

The current working directory can be displayed using the function `getwd()`, e.g.

```{r}
#| eval: false
#| echo: true
getwd()
```

The working directory can be set using the function `setwd()`, e.g.

```{r}
#| eval: false
#| echo: true
setwd("/project/obds/shared")
```

<br/>

Note:

- The *working directory* is a location in the computer's *filesystem* (i.e., hard drive).
- The *workspace* is an environment in the computer's *memory* (i.e., RAM).

## Saving and loading workspaces

It is possible to store one or more objects from the workspace to an `.RData` file.

The `save()` function writes an external representation of <i class="fab fa-r-project"></i> objects to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save(a, b, file = "workspace.RData")
```

The file can only be read using the `load()` function to restore those objects into an <i class="fab fa-r-project"></i> session.
It is not possible to read that type of file with any other program.

```{r}
#| eval: false
#| echo: true
load("workspace.RData")
```

Note:

- The objects are restored under their original name in the workspace where they were saved, overwriting any object with the same name in the workspace where they are restored. Beware!

The function `save.image()` takes only a file path and writes *all* the objects in the workspace to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save.image(file = "workspace.RData")
```

## Saving and loading individual objects

<br/>

The function `saveRDS()` saves a a single object to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
saveRDS(object = a, file = "a.rds")
```

<br/>

The function `readRDS()` imports an object saved in an RDS file, e.g.

```{r}
#| eval: false
#| echo: true
a_restored <- readRDS(file = "a.rds")
```

<br/>

Note:

- The object is saved to the file *without* its name.
- The object can be assigned to a name, which can be the original name of the object or a new one.
- If not assigned, the object is simply printed in the <i class="fab fa-r-project"></i> console.

## Saving and loading -- Summary

The workspace, stored in memory, is temporary and discarded when the <i class="fab fa-r-project"></i> is closed.

A range of functions are available to save objects from your <i class="fab fa-r-project"></i> workspace to files, and restore those objects later.

You may choose different functions in different scenarios.

<br/>

::: {style="text-align: center;"}
**When would you use each of the following functions?**
:::

```{r}
#| eval: false
#| echo: true
# write object 'x' to a tab separated file
write.table(x, file = "mydata.txt", sep = "\t")

# save objects 'a' and 'b' to an RData file
save(a, b, file = "workspace.RData")

# save all objects in the workspace to an RData file
save.image(file = "workspace.RData")

# save a single object to an RDS file
saveRDS(a, file = "a.rds")
```

<br/>

::: {style="text-align: center;"}
**How would you import data from each of those files?**
:::

## Miscellaneous commands for workspace management

<br/>

The commands below are useful to get information and manage the workspace and working directory.

<br/>

```{r}
#| eval: false
#| echo: true
# list the names of objects in the workspace
ls()

# remove objects from the workspace
rm(a, b)

# remove all objects from the workspace
rm(list = ls())

# get working directory
getwd()

# set working directory
setwd("/project/obds/shared")

# list files in the working directory
list.files()

# create a new directory
dir.create("new_directory")
```

## Exercise

### Workspace management

- Open a new <i class="fab fa-r-project"></i> script and write code to create three new objects (any type, any name, any value).
- Save your <i class="fab fa-r-project"></i> script.
- Save all objects in your workspace to an `.RData` file.
- Write one object in your workspace to a file using `saveRDS()`.
- Remove one object from your workspace.
- Prove that the object was removed.
- Remove all objects from your workspace.
- Display your working directory.
- Create a new directory and set the working directory in that new directory.
- Restore objects saved in the `.RData` file to your workspace.
- Restore the object saved in the RDS file to your workspace under a different name.

## R Markdown

R Markdown combines text, code, and results in a single document.

It has many appealing features that make it an essential tool for data analysts, researchers, and scientists:

- Allows users to write reports, presentations, and interactive documents using R code.
- Supports various output formats including HTML, PDF, and Word.
- Provides flexibility to customize document styles and layouts.
- Streamlines the process of creating reproducible research.

## Create a new R Markdown file

- Open the `New R Markdown` wizard.
- Type a title of your choice and your full name in the form.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-width: 500px
#| out-height: 500px
knitr::include_graphics("img/rmd_file.png")
```
:::

::: {.column width="50%"}
### Structure

- Header in [YAML syntax](https://yaml.org/) enclosed between two lines `---`.
- Code blocks enclosed between start line ` ```{...} ` and end line ` ``` `.
  - Different programming languages are supported, e.g. `{r}` indicates an <i class="fab fa-r-project"></i> code block.
  - Code block options can be set, e.g. `include=FALSE`.
  - Code blocks can be named, e.g. `cars`.
- Regular text using [Markdown syntax](https://www.markdownguide.org/basic-syntax/).
:::

::::

## Rendering R Markdown files

The `Knit` button can be used to render R Markdown files into its default output format.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-width: 500px
#| out-height: 500px
knitr::include_graphics("img/rmd_file.png")
```
:::

::: {.column width="50%"}

### More ways to render

- The arrow icon next to the `Knit` button can be used to select alternate output formats.
-  The function `rmarkdown::render()` can also be used to render files from the <i class="fab fa-r-project"></i> console, giving access to many more options.

```{r}
#| fig-align: center
#| out-width: 400px
#| out-height: 300px
knitr::include_graphics("img/rmd_html.png")
```
:::

::::

# Coffee break
