## Workspace management in <i class="fab fa-r-project"></i> sessions

The *workspace* is the current <i class="fab fa-r-project"></i> environment that contains all the user-defined objects (including functions) in the current session. 

As you define new objects and functions, these new objects are stored in the workspace.

When you close RStudio, you may see a message asking you "Save workspace image to .RData?"

- Agreeing saves all the objects currently in your workspace to a file on your computer;
  this is useful if you expect to restore the workspace in a later session.
- Declining discards your workspace; this is useful if you like to start <i class="fab fa-r-project"></i> with an empty, clean workspace.

<br/>

Note:

- Saving a workspace does *not* save the commands that you used to generate it.
- It is much more important to save scripts than to save workspaces.

## The working directory

The *working directory* is the location on the computer running the <i class="fab fa-r-project"></i> session relative to which commands are evaluated.

- Some commands are not affected by the working directory.

Any *relative* file path given to a command will be relative to the working directory, e.g.

```{r}
#| eval: false
#| echo: true
my_data <- read.csv(file = "data.csv")
```

Any *absolute* file path given to a command will *not* be impacted by the working directory, e.g.

```{r}
#| eval: false
#| echo: true
write.csv(x = my_data, file = "/project/obds/shared/data.csv")
```

The current working directory can be displayed using the function `getwd()`, e.g.

```{r}
#| eval: false
#| echo: true
getwd()
```

The working directory can be set using the function `setwd()`, e.g.

```{r}
#| eval: false
#| echo: true
setwd("/project/obds/shared")
```

<br/>

Note:

- The *working directory* is a location in the computer's *filesystem* (i.e., hard drive).
- The *workspace* is an environment in the computer's *memory* (i.e., RAM).

## Saving and loading workspaces

It is possible to store one or more objects from the workspace to an `.RData` file.

The `save()` function writes an external representation of <i class="fab fa-r-project"></i> objects to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save(a, b, file = "workspace.RData")
```

The file can only be read using the `load()` function to restore those objects into an <i class="fab fa-r-project"></i> session.
It is not possible to read that type of file with any other program.

```{r}
#| eval: false
#| echo: true
load("workspace.RData")
```

Note:

- The objects are restored under their original name in the workspace where they were saved, overwriting any object with the same name in the workspace where they are restored. Beware!

The function `save.image()` takes only a file path and writes *all* the objects in the workspace to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
b <- "A"
save.image(file = "workspace.RData")
```

## Saving and loading individual objects

<br/>

The function `saveRDS()` saves a a single object to the specified file, e.g.

```{r}
#| eval: false
#| echo: true
a <- 1
saveRDS(object = a, file = "a.rds")
```

<br/>

The function `readRDS()` imports an object saved in an RDS file, e.g.

```{r}
#| eval: false
#| echo: true
a_restored <- readRDS(file = "a.rds")
```

<br/>

Note:

- The object is saved to the file *without* its name.
- The object can be assigned to a name, which can be the original name of the object or a new one.
- If not assigned, the object is simply printed in the <i class="fab fa-r-project"></i> console.

## Saving and loading -- Summary

The workspace, stored in memory, is temporary and discarded when the <i class="fab fa-r-project"></i> is closed.

A range of functions are available to save objects from your <i class="fab fa-r-project"></i> workspace to files, and restore those objects later.

You may choose different functions in different scenarios.

<br/>

::: {style="text-align: center;"}
**When would you use each of the following functions?**
:::

```{r}
#| eval: false
#| echo: true
# write object 'x' to a tab separated file
write.table(x, file = "mydata.txt", sep = "\t")

# save objects 'a' and 'b' to an RData file
save(a, b, file = "workspace.RData")

# save all objects in the workspace to an RData file
save.image(file = "workspace.RData")

# save a single object to an RDS file
saveRDS(a, file = "a.rds")
```

<br/>

::: {style="text-align: center;"}
**How would you import data from each of those files?**
:::

## Miscellaneous commands for workspace management

<br/>

The commands below are useful to get information and manage the workspace and working directory.

<br/>

```{r}
#| eval: false
#| echo: true
# list the names of objects in the workspace
ls()

# remove objects from the workspace
rm(a, b)

# remove all objects from the workspace
rm(list = ls())

# get working directory
getwd()

# set working directory
setwd("/project/obds/shared")

# list files in the working directory
list.files()

# create a new directory
dir.create("new_directory")
```

## Exercise

### Workspace management

- Open a new <i class="fab fa-r-project"></i> script and write code to create three new objects (any type, any name, any value).
- Save your <i class="fab fa-r-project"></i> script.
- Save all objects in your workspace to an `.RData` file.
- Write one object in your workspace to a file using `saveRDS()`.
- Remove one object from your workspace.
- Prove that the object was removed.
- Remove all objects from your workspace.
- Display your working directory.
- Create a new directory and set the working directory in that new directory.
- Restore objects saved in the `.RData` file to your workspace.
- Restore the object saved in the RDS file to your workspace under a different name.

## R Markdown

R Markdown combines text, code, and results in a single document.

It has many appealing features that make it an essential tool for data analysts, researchers, and scientists:

- Allows users to write reports, presentations, and interactive documents using R code.
- Supports various output formats including HTML, PDF, and Word.
- Provides flexibility to customize document styles and layouts.
- Streamlines the process of creating reproducible research.

## Create a new R Markdown file

- Open the `New R Markdown` wizard.
- Type a title of your choice and your full name in the form.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-width: 500px
#| out-height: 500px
knitr::include_graphics("img/rmd_file.png")
```
:::

::: {.column width="50%"}
### Structure

- Header in [YAML syntax](https://yaml.org/) enclosed between two lines `---`.
- Code blocks enclosed between start line ` ```{...} ` and end line ` ``` `.
  - Different programming languages are supported, e.g. `{r}` indicates an <i class="fab fa-r-project"></i> code block.
  - Code block options can be set, e.g. `include=FALSE`.
  - Code blocks can be named, e.g. `cars`.
- Regular text using [Markdown syntax](https://www.markdownguide.org/basic-syntax/).
:::

::::

## Rendering R Markdown files

The `Knit` button can be used to render R Markdown files into its default output format.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-width: 500px
#| out-height: 500px
knitr::include_graphics("img/rmd_file.png")
```
:::

::: {.column width="50%"}

### More ways to render

- The arrow icon next to the `Knit` button can be used to select alternate output formats.
-  The function `rmarkdown::render()` can also be used to render files from the <i class="fab fa-r-project"></i> console, giving access to many more options.

```{r}
#| fig-align: center
#| out-width: 400px
#| out-height: 300px
knitr::include_graphics("img/rmd_html.png")
```
:::

::::

# Coffee break

## Functions

An <i class="fab fa-r-project"></i> function is a block of code that performs a specific task and can be called and executed by providing input parameters.

Base <i class="fab fa-r-project"></i> provides many functions to get started with the most common and simplest tasks, e.g.

```{r}
#| eval: false
#| echo: true
c(1, 2, 3)
matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2)
x <- read.table(file = "data.txt")
```

New functions can be defined using the `function()` function, curly brackets `{}`, and the `return()` function, e.g.

```{r}
#| eval: true
#| echo: true
multiply <- function(a, b) {
    result <- a * b
    return(result)
}
```

Functions are called using their name and round brackets `()` surrounding their arguments, e.g.

```{r}
#| eval: true
#| echo: true
two_by_three <- multiply(2, 3)
two_by_three
```

## Reminder about brackets

<br/>

Remember:

- Square brackets `[]` are used for indexing, e.g.

```{r}
#| eval: false
#| echo: true
vector[1:3]
data_frame[1:3, c("column1", "column3")]
```

<br/>

- Round brackets `()` are used for function arguments, e.g.

```{r}
#| eval: false
#| echo: true
c(1, 2, 3)
data.frame(column1 = c(1, 2, 3), column2 = c("A", "B", "C"))
```

<br/>

- Curly brackets `{}` are used to surround the block of code executed when a function is called, e.g.

```{r}
#| eval: false
#| echo: true
multiply <- function(a, b) {
    result <- a * b
    return(result)
}
```

## Summarising data in base <i class="fab fa-r-project"></i>

#### Descriptive statistics

```{r}
#| eval: false
#| echo: true
sum()
mean()
median()
min()
max()
```

<br/>

#### Matrices and data frames

```{r}
#| eval: false
#| echo: true
## Matrices, data frames
rowMeans()
colMeans()
```

<br/>

#### Miscellaneous

```{r}
#| eval: false
#| echo: true
# Sorting
sort()
order()

# Combining data frames
merge()

# Summarising groups of data
aggregate()
```

## Demo

### Summarising data in base <i class="fab fa-r-project"></i>

```{r}
#| eval: true
#| echo: true
x <- c(10, 5, 8, 3, 5)
x
```

```{r}
#| eval: true
#| echo: true
sum(x)
```

```{r}
#| eval: true
#| echo: true
mean(x)
```

```{r}
#| eval: true
#| echo: true
median(x)
```

```{r}
#| eval: true
#| echo: true
max(x)
```

```{r}
#| eval: true
#| echo: true
min(x)
```

## Demo

### Matrices and data frames

:::: {.columns}

::: {.column width="50%"}
<br/>

<br/>

<br/>

`colSums()` computes the sum of each column.

`rowSums()` computes the sum of each row.

`colMeans()` computes the mean of each column.

`rowMeans()` computes the mean of each row.
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
m <- matrix(1:12, nrow = 3, ncol = 4)
m
```

```{r}
#| eval: true
#| echo: true
colSums(m)
```

```{r}
#| eval: true
#| echo: true
rowSums(m)
```

```{r}
#| eval: true
#| echo: true
colMeans(m)
```

```{r}
#| eval: true
#| echo: true
rowMeans(m)
```
:::

::::

## Combining vectors and matrices

```{r}
#| eval: true
#| echo: true
m1 <- cbind(1:2, 3:4)
m1
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
m2 <- cbind(m1, row_sum = rowSums(m1))
m2
```
:::
::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
m3 <- rbind(m2, col_sum = colSums(m2))
m3
```
:::

::::

## Missing values

Missing values are represented by the value `NA`.

Many functions will behave differently in the presence of `NA` values, e.g.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
mean(c(1, 2, 3))
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
mean(c(1, 2, NA))
```
:::

::::

Some functions can be told to ignore `NA` values, e.g.

```{r}
#| eval: true
#| echo: true
mean(c(1, 2, NA), na.rm = TRUE)
```

The function `is.na()` takes a vector and returns a logical vector indicating whether each value is `NA`.

```{r}
#| eval: true
#| echo: true
is.na(c(1, 2, NA, NA, 5))
```

The function `anyNA()` returns `TRUE` if any value is `NA` in the argument, e.g.

```{r}
#| eval: true
#| echo: true
anyNA(c(1, 2, NA, NA, 5))
```

Note:

- The value `NA` is different from `NaN`, a value used to represent impossible values, e.g.

```{r}
#| eval: true
#| echo: true
0/0
```

## Exercise

### Descriptive statistics

- Use `readRDS()` to load the file `/project/obds/shared/resources/2_r/my_day2matrix.rds` and assign the object to the name `m`.
- Compute the sum of values in each row and add those values as a new column in the matrix.
- Run the command `data("ToothGrowth")` to load the builtin data set `ToothGrowth`.
- Open the help page for the `ToothGrowth` data set, to learn more about it.
- What is the class of the `ToothGrowth` object?
- What type of data is stored in each column of the `ToothGrowth` data set?
- What is the mean tooth length across all observations in the data set?
- What is maximum value of tooth length?
- What is minimum value of tooth length?
- Can you use the functions `rowSums()` and `colSums()` on the `ToothGrowth` object?

## Sorting vectors

<br/>

The function `sort()` takes a vector and returns it with its values sorted in increasing order, e.g.

```{r}
#| eval: true
#| echo: true
sort(c(3,5,1,4,2))
```

The argument `decreasing=` can be set to `TRUE` to sort values in decreasing order, e.g. 

```{r}
#| eval: true
#| echo: true
sort(c(3,5,1,4,2), decreasing = TRUE)
```

<br/>

Alternatively, the function `order()` can be used to return the index of values in increasing order.

```{r}
#| eval: true
#| echo: true
order(c("c", "b", "a", "d", "e"))
```

Among many other uses, the return value of `order()` can be used to sort vectors using indexing, e.g.

```{r}
#| eval: true
#| echo: true
v <- c("c", "b", "a", "d", "e")
v[order(v)]
```

The function `order()` also accepts an argument `decreasing=`, which takes a logical value.

```{r}
#| eval: true
#| echo: true
order(v, decreasing = TRUE)
```

## Sorting data frames

The columns of data frames being vectors, the function `order()` can also be used to sort the rows of a data.frame.

The function `order()` can even take multiple vectors, in which case it breaks ties in the earlier vectors using values in the later vectors, e.g.

```{r}
#| eval: true
#| echo: true
df <- data.frame(
    value = c(5, 2, 1, 3, 6, 4),
    group = c("b", "a", "c", "e", "d", "f"),
    batch = factor(c("A", "B", "A", "B", "A", "B"))
)
df
```

<br/>

```{r}
#| eval: true
#| echo: true
o <- order(df$batch, df$group)
o
df[o, ]
```

## Combining data frames

The function `merge()` can be used to combine two data frames using information they have in common.

The `merge()` function takes the two data frames to combine and the names of columns to use for merging (i.e., where shared information is found), e.g.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
df1 <- data.frame(
    value = c(1, 2, 3, 4),
    sample = c("A", "B", "C", "D")
)
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
df2 <- data.frame(
    sample = c("A", "B", "C", "D"),
    group = c("control", "control", "treated", "treated")
)
```

:::

::::

The `by=` argument can be used if the columns have exactly the same name in the two data frames.

```{r}
#| eval: true
#| echo: true
merge(x = df1, y = df2, by = "sample")
```

Alternatively, the arguments `by.x=` and `by.y=` can be used, whether the columns have different names or not.

```{r}
#| eval: true
#| echo: true
merge(x = df1, y = df2, by.x = "sample", by.y = "sample")
```

## Combining partially overlapping data frames

The `merge()` function argument `all=` controls whether to discard rows that do not match between the two data frames being combined (the default), or preserve those rows and insert `NA` values to fill missing information, e.g.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
df1 <- data.frame(
    value = c(1, 2, 3, 5),
    sample = c("A", "B", "C", "E")
)
```
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: true
df2 <- data.frame(
    sample = c("A", "B", "C", "D"),
    group = c("control", "control", "treated", "treated")
)
```

:::

::::

The default, `all = FALSE`.

```{r}
#| eval: true
#| echo: true
merge(x = df1, y = df2, by = "sample", all = FALSE)
```

Alternatively, `all = TRUE`.

```{r}
#| eval: true
#| echo: true
merge(x = df1, y = df2, by = "sample", all = TRUE)
```

## Summarising groups of data

The `aggregate()` function can be used to compute summary statistics on groups of rows in a data frame, e.g.

```{r}
#| eval: true
#| echo: true
head(iris)
```

The function `aggregate()` takes a data frame `x=`, a list of grouping variables `by=`, and a function `FUN=` to compute on each group of values in each column of the data frame.

```{r}
#| eval: true
#| echo: true
aggregate(x = iris, by = list(species = iris$Species), FUN = mean)
```

The `aggregate()` function handles additional arguments to the function `FUN=`, e.g.

```{r}
#| eval: true
#| echo: true
aggregate(x = iris, by = list(species = iris$Species), FUN = mean, na.rm = TRUE)
```

## Exercise

### Sorting data frames

- Load the `airquality` data set.
- Open the help page for this data set.
- Examine the data set.
- Display the column names of the `airquality` data frame.
- Sort the data frame by increasing value in the `Ozone` column.
- Sort the data frame by `Month` in increasing order and `Temp` in decreasing order.
- Write the latest sorted data frame to a text file format of your choice.

## Exercise

### Merging data frames

Run the code below to create two data frames.

```{r}
#| eval: true
#| echo: true
buildings <- data.frame(
    site = c(1, 2, 3),
    name = c("b1", "b2", "b3"))

survey_data <- data.frame(
    survey = c("A", "A", "A", "B", "B", "B"),
    location = c(1, 2, 3, 2, 3, 1),
    efficiency = c(51, 64, 70, 71, 80, 58))
```

<br/>

- What is the shared information in these two data frames?
- Use the `merge()` function to combine the two data frames by the shared information into a new data frame called `buildings_survey`.

## Exercise

### Summarising groups of data

- Compute the mean of each numeric column each month in the `airquality` data frame.
  - Make sure `NA` values are removed.
- Compute the mean of the `Solar.R` column each month.
  - Make sure the grouping column is called `Month` in the return value.
  - Make sure `NA` values are removed.
- Compute the standard deviation of the column `Solar.R` in the aggregated data generated in the previous step.

# Lunch break

## User defined functions

New functions can be created and assigned to names in the workspace, e.g.

```{r}
#| eval: true
#| echo: true
cost_groceries <- function(apples, pears, oranges, ...) {
    ## comment 
    message("apples: ", apples, ", pears: ", pears, ", oranges: ", oranges)
    total <- apples * 0.5 + pears * 0.75 + oranges * 1
    return(total)
}
```

Once assigned, the function can be called and given arguments using round brackets `()`, e.g.

```{r}
#| eval: true
#| echo: true
#| message: true
output <- cost_groceries(1, 2, 3, 4)
output
```

Note:

- Unnamed arguments are given in the the order of the function definition.
- The symbol `...` is called *ellipsis*.
- The ellipsis can be used to let a function accept additional arguments which may or may not be used (read the help page of the relevant function for more details).
- Commenting functions is good practice to rapidly remember what a function does.
- Assigning functions to names based on verbs is good practice for readability.

## Setting default values for function arguments

When creating a function, any argument can be given a default value that will be used when undefined in later calls to the function, e.g.

```{r}
#| eval: true
#| echo: true
cost_groceries <- function(apples, pears = 0, oranges = 0, ...) {
    ## comment 
    message("apples: ", apples, ", pears: ", pears, ", oranges: ", oranges)
    total <- apples * 0.5 + pears * 0.75 + oranges * 1
    return(total)
}
```

Arguments without default values are required, e.g.

```{r}
#| eval: true
#| echo: true
#| error: true
cost_groceries(pears = 1, oranges = 2)
```

Remember that unnamed arguments are given in the the order of the function definition, e.g.

```{r}
#| eval: true
#| echo: true
#| message: true
cost_groceries(pears = 1, 3, oranges = 2)
```

<br/>

Best practice is to give arguments in the order of the function definition where possible.

## Exercise

### Writing a function

- Write a function to calculate the hypotenuse of a triangle given the length of the other two sides.
- Run the function you have created with different values.

<br/>

Note:

- To find the hypotenuse, add the squares of the other sides, then take the square root, i.e. $\sqrt{a^2 + b^2}$

## Applying functions on matrices

The `apply()` function can be used to apply a function on each of the rows or columns of a matrix.

<br/>

The `apply()` function takes a matrix `X=`, the selected dimension `MARGIN=`, and the function `FUN=` to apply along that dimension, e.g.

```{r}
#| eval: true
#| echo: true
m <- matrix(1:12, nrow = 3, ncol = 4)
m
```

<br/>

:::: {.columns}

::: {.column width="50%"}
### By row

Sum of each row.

```{r}
#| eval: true
#| echo: true
apply(X = m, MARGIN = 1, FUN = sum)
```
:::

::: {.column width="50%"}
### By column

Mean of each column.

```{r}
#| eval: true
#| echo: true
apply(X = m, MARGIN = 2, FUN = mean)
```
:::

::::

## Apply functions to vetors and lists

The function `lapply()`, `sapply()`, and `vapply()` can be used to apply functions to iterable objects such as vectors and lists.

:::: {.columns}

::: {.column width="50%"}
`lapply(X, FUN, ...)` returns a list of the same length as `X=`.
Each element of the return value is the result of applying `FUN=` to the corresponding element in `X=`, e.g.

```{r}
#| eval: true
#| echo: true
lapply(X = 1:4, FUN = sqrt)
```
:::

::: {.column width="50%"}

`sapply(X, FUN, ...)` is a user-friendly version and wrapper of `lapply()` by default returning a vector or matrix where suitable, e.g.

```{r}
#| eval: true
#| echo: true
sapply(X = 1:4, FUN = sqrt)
```

<br/>

`vapply(X, FUN, FUN.VALUE, ...)` is similar to `sapply()`, but has a pre-specified type of return value, so it can be safer (and sometimes faster) to use.

```{r}
#| eval: true
#| echo: true
vapply(X = 1:4, FUN = sqrt, FUN.VALUE = numeric(1))
```
:::

::::

## Apply functions to ragged arrays

The `tapply()` function can be used to apply a function to groups of values in a vector, e.g.

```{r}
#| eval: true
#| echo: true
values <- c(  1,   2,   3,   4,   5,  6 )
groups <- c("A", "A", "A", "B", "B", "B")
tapply(X = values, INDEX = groups, FUN = sum)
```

## Exercise

### Apply

#### Part 1

- Create a vector of integers from 1 to 10.
- Compute the square of each value in the vector using either `lapply()` or `sapply()`.
- Compare the outputs of `lapply()` and `sapply()` in the previous step.

#### Part 2

- Create a list of four elements, each element being a vector of type either numeric or logical.
- Compute the sum of each vector in the list using either `lapply()` or `sapply()`.

#### Part 3

- Use `sapply()` on the list that you created in part 2, to repeat each element of each vector three times.
  - i.e., `1, 2, 3` should become `1, 1, 1, 2, 2, 2, 3, 3, 3`

# Coffee break

## Loops

Loops are programming constructs that allows users to execute a set of instructions repeatedly.

There are different types of loops: `for`, `while`, and `repeat`.

<br/>

The `for` loop defines a loop variable that iterates over elements of a vector, executing instructions a finite number of times, e.g.

```{r}
#| eval: true
#| echo: true
for (i in 1:3) {
    print(i)
}
```

<br/>

The `while` loop defines a condition that allows the loop to iterate as long as the condition evaluates to `TRUE`, e.g.

```{r}
#| eval: true
#| echo: true
i <- 0
while (i < 5) {
    print(i)
    i <- i + 2
}
```

## The repeat loop

The `repeat` loop iterates until the `break` keyword is encountered.

This type of loop is mainly intended for interactive prompte, e.g.

```{r}
#| eval: false
#| echo: true
repeat {
  x <- readline(prompt = "Guess the secret number: ")
  x <- as.numeric(x)
  if (x == 10) {
      print(paste("You found the secret number!"))
    break
  }
  print(paste("Missed, try again!"))
}
```

## Conditions

<br/>

Parts of code can be executed conditionally using the keywords `if`, `else if`, and `else`, e.g.

```{r}
#| eval: true
#| echo: true
value <- 3
if (value < 5) {
    print("value is lower than 5")
} else if (value == 5) {
    print("value is equal to 5")
} else {
    print("value is greater than 5")
}
```

<br/>

The function `ifelse(test, yes, no)` returns a value with the same shape as `test` which is filled with elements selected from either `yes` or `no` depending on whether the element of `test` is `TRUE` or `FALSE`, e.g.

```{r}
#| eval: true
#| echo: true
ifelse(test = c(TRUE, TRUE, FALSE, FALSE), yes = "Pass", no = "Fail")
```

## Exercise

### Loops and conditions

- Write a `for` loop that iterates over the integers 1 to 7 and prints the number raised to the power of three.
- Write a `for` loop that iterates over the names of the columns in the builtin data set `iris` and prints each column name together with the number of characters in that column name.
  - Example output: `Sepal.Length: 12`
  - Hint: use the functions `print()`, `paste0()`, and `nchar()`.
  - Remember to read the help page of each function to learn more about them.
- Use the `ifelse()` function to print the name of colours that are made up of four characters in the vector `my_colours` below.

```{r}
#| eval: true
#| echo: true
my_colours <- c("red", "orange", "purple", "yellow", "pink", "blue")
```

## Further reading

- Writing functions and loops:
  - <https://ourcodingclub.github.io/tutorials/funandloops>
- Errors and Warnings:
  - <https://statisticsglobe.com/errors-warnings-r>

## References

```{r refs, results="asis"}
PrintBibliography(bib)
```
