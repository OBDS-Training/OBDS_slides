# Talk 2: Introduction to the Linux command line

## Overview

- Linux is a type of computer operating system (OS), like Windows or MacOS, that is part of the Unix 
family of OS

<!--
- Linux is frequently used in high-performance computing and applications e.g. in Computational Biology
-->

<br>
<br> 

:::: {.columns}

::: {.column width="60%"}

- Introduction to the Linux shell 
- Using and getting help with Linux commands 
- Navigating the Linux file system
- Viewing and editing files
- Remote connection a Linux server or cluster
- File properties and permissions
- Manipulating files and directories

:::

::: {.column width="40%"}
```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 250px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/UNIX-Logo-500x281.jpg")
```

<br>
<br>

```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 250px
## Source: https://1000logos.net/linux-logo/
knitr::include_graphics("img/Symbol-Linux.jpg")
```
:::

::::

## Linux shell - Terminology alert!

<!-- 
Nice explanation in https://www.freecodecamp.org/news/command-line-for-beginners/ and
https://www.freecodecamp.org/news/the-linux-commands-handbook/#introductiontolinuxandshells
-->

- Linux is an Operating System (OS), like MS Windows and macOS, but open source (source code is freely available!)
- Typically, we interact with the OS by clicking on visual elements like windows, icons, and menus to execute tasks but we can also do this through a **shell**
- All OS have a  **shell** (a command-line interpreter) for us to communicate with the OS
  + The **shell** takes commands from the keyboard and gives them to the OS to perform
- There are different shells differing in syntax and characteristics

## Linux shell - Terminology alert!

- Most widely used shell for Linux is **Bash** (Bourne Again Shell)
- A **terminal emulator** (e.g. Git Bash, macOS Terminal app) is used to interact with the shell, providing the **command-line interface (CLI)**, where user inputs commands
  + The command-line prompt (input field) is indicated by a certain character depending on the OS ($ for Linux)

<span style="color:green;">**Open terminal emulator**</span>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| fig-align: center
#| out-height: 225px
#| out-width: 500px
## Source: custom-made (obds_sep2023/02_Introduction_to_the_linux_command_line.pptx, slide 2)
knitr::include_graphics("img/linux_shell_bash.png")
```
:::

::: {.column width="50%"}

```{r, linux_shell_emulator}
#| fig-align: center
#| out-height: 225px
#| out-width: 500px
## Source: custom-made (obds_sep2023/02_Introduction_to_the_linux_command_line.pptx, slide 2)
knitr::include_graphics("img/linux_shell_emulator.png")
```
:::

::::

## Anatomy of a Linux command

- We write and send commands to shell to execute tasks

- Ways to write commands - <span style="color:green;">**DEMO using `ls`**</span>
  + \<command>      
  + \<command> \<argument> 
  + \<command> \<options> \<argument> 

- <span style="color:red;">Note!</span>
  + \<arrows> - indicate that this part is to be replaced accordingly, removing also the arrows

## Anatomy of a Linux command

- Types of commands
  + **Shell builtin** - Built into the shell itself
  + **Executable program** - Any external software in the system path (where OS looks for executable programs, To Be Discussed)
  + **Alias** - User-defined command built using other commands (To Be Discussed / TBD)

```
$ type cd               # ‘type’ shows the type of command
cd is a shell builtin

$ type head
head is /usr/bin/head
      
$ which head            # ‘which’ returns the path of the file to be executed
/usr/bin/head
```

- <span style="color:red;">Note!</span>
  + '$' - indicates the command-line prompt (input field) and so it should not be included when typing the command
  
## Linux command options

- Commands have options that modify their functions
  + \<command> \<options> \<argument>
  + Short options start with '-' (TBD)
  + Long options start with '\-\-' (TBD)

<br>

<!-- ``` -->
<!-- $ which head -->
<!-- /usr/bin/head -->

<!-- $ which -a head         # -a to print all matching paths of each argument -->
<!-- /usr/bin/head -->
<!-- /bin/head -->
<!-- ``` -->

```
$ ls -l     # -l List files and other details

-rw-r--r-- 1 exet4759 domain users  270 Jan 15  2024 history_day1_linux.txt
-rw-r--r-- 1 exet4759 domain users   57 Jan 17  2024 md5_checksums
drwxr-xr-x 4 exet4759 domain users 4096 Jan 22  2024 obds
drwxr-xr-x 3 exet4759 domain users 4096 Sep  1  2023 R
```

## Changing how you view files using ``ls`` options

:::: {.columns}

::: {.column width="50%"}

```{r}
#| fig-align: center
#| out-height: 375px
#| out-width: 450px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/ls_options.png")
```

:::

::: {.column width="50%"}

- Short options can be bundled
  ```
  $ ls -l -t -a -h -F

  $ ls -ltahF    
  ```
  + -l - Long format, displaying detailed information (e.g. permissions, size, timestamp of latest update)
  + -t - Sort files by modification time (newest first)
  + -a - Show hidden files
  + -h - Human readable numbers
  + -F - Append an indicator to the end of each listed name (e.g. '/' for a directory)

:::

::::

- Short vs. long format
  + Short options can be bundled so less typing but less readabable
  + Long options more readable and descriptive
  + Choosing what format to follow boils down mainly to preference

## Getting help with Linux commands

- Different ways
  + `man` shows manual pages of the command
  ```
  $ man head
  ```
  + Press 'q' to exit
  
```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 800px
## Source: screenshot from jade
knitr::include_graphics("img/man_head.png")
```

## Getting help with Linux commands

- Different ways
   + Commands often come with the help option, `--help`
   ```
   $ head --help
   ```
   + More concise than `man` output

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 600px
## Source: screenshot from jade
knitr::include_graphics("img/help_head.png")
```

## Getting help with Linux commands

- Different ways
  + Google search!
  + Use in combination with command-line ways for information compatible with your system

```{r}
#| fig-align: center
#| out-height: 350px
#| out-width: 600px
## Source: Google search! :>
knitr::include_graphics("img/google_head.png")
```

## Some useful keyboard shortcuts

- **Tab** - autocomplete (will prompt if ambiguous)
  + Predict rest of word (e.g. command or file path/name) based on first few typed characters
  
```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 600px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/tab_autocompletion.png")
```

- **Up and down arrows** - Access history of commands
- **Control + c** - Abort current command
- **Control + a** - Go to start of line
- **Control + e** - Go to end of line
- **Control + l** - Clear screen 

<span style="color:green;">**DEMO**</span>

## Linux file system tree

:::: {.columns}

::: {.column width="20%"}

- In Linux, everything is a file organised in a tree structure
- A directory is just a file containing names of other files
- All directories branch off from the **root** ('/') directory
- **home** ('~') is your personal (user) directory

:::

::: {.column width="80%"}

```{r}
#| fig-align: center
#| out-height: 600px
#| out-width: 1000px
## Source: https://www.linuxfoundation.org/blog/blog/classic-sysadmin-the-linux-filesystem-explained
knitr::include_graphics("img/linux_file_tree.png")
```

:::

::::

## Linux commands to navigate the file structure

- Basic commands

```
$ pwd                       # Present Working Directory
/home/imm/<user>            # When you log into the teaching server, the working directory
                              is initially set to the user’s home directory
$ ls                        # LiSt files
Desktop  Documents  Downloads...

$ cd Desktop                # Change Directory
```

## Working with Paths 

Every file has a path - location of a file

:::: {.columns}

::: {.column width="40%"}

- There are two ways to indicate paths, absolute and relative
- Absolute paths
  + Absolute paths always starts with the root directory ('/')
  + Given by `realpath`
  
    ```
    $ realpath foo
    /home/mthomas/class_stuff/foo
    ```
  + Each location separated by '/'
  
:::

::: {.column width="60%"}

```{r, sample_working_tree}
#| fig-align: center
#| out-height: 300px
#| out-width: 700px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/sample_working_tree.png")
```

:::

::::

## Working with Paths 

:::: {.columns}

::: {.column width="40%"}

- Relative paths 
  + Relative paths are relative to the current working directory or where you are currently
  + Does not start with the root directory ('/')
- Path shortcuts
  + .. (2 full stops)  parent / previous directory
  + .  (full stop)     current directory 
  + ~  (tilde)         home directory
  + /  (forward slash) root directory
  

```
$ pwd 
/home/mthomas/class_stuff/foo
    
$ cd ../bar     # Go to bar
$ cd ../../bin  # Go to bin    
```
  
:::

::: {.column width="60%"}
```{r, sample_working_tree}
#| fig-align: center
#| out-height: 300px
#| out-width: 700px
```
:::

::::

## Working with Paths

- Tips
  + Prompt tells you your current working directory
  
  ```{r, linux_shell_emulator}
  #| fig-align: center
  ```
  + Always use tab autocompletion to avoid typos 
  + `ls` output can be set to be coloured to indicate the type of each file 
    - <span style="color:indigo;">Directory</span>
    - File
    - <span style="color:cyan;">Symbolic link</span> (TBD) 
    - <span style="color:#b84e38;">Compressed file</span> (TBD)
    
## Viewing text files on the command line

- Useful commands
  + \<filename> - input file path or name (if file is in current working directory)

```
$ cat <filename>            # Print the entire file contents to the terminal
                            # If taking a while, interrupt with Control + c
$ head -n 20 <filename>     # Print the first n lines to the terminal (default=10)
$ tail -n 20 <filename>     # Print the last n lines to the terminal (default=10)
$ wc <filename>             # Count the number of characters (-m), lines (-l) etc.
```

- Interactively scroll through files

```
$ more <filename>           # Scroll through a file unidirectionally from top to 
                              bottom
$ less <filename>           # Like more but allows backward movement, "less is more"

                            # Up and down arrow keys to scroll one line up or down
                            # Left and right arrow keys to scroll one screen worth 
                              left or right across contents
                            # Unlike more, reaching end will not terminate 
                              interactive viewer
```

 + For both `more` and `less`
   - Use space bar to scroll down one screen worth of contents
   - Exit anytime with 'q'
   
<!-- @sec-Talk2Exercise1 -->

## Remote connection to a Linux server

We will do exercises on the Linux OBDS teaching server so how to connect to it?
<br>

- We can log into a remote target host (e.g. server or cluster) using `ssh`
- SSH (secure shell) is an encrypted network protocol for establishing a secure remote connection to a target host
  + The protocol uses a username and password to authenticate a user on the target host
 
- To connect to the OBDS server (obds)
  1. Connect to WIMM VPN
  2. Use this command:
 
  ```
  $ ssh <username>@obds
  ```
  
<span style="color:green;">**Do together**</span>

- To log out from the remote hosts, use any of the following:
  + Type 'exit' and press the Return key
  + Type 'logout' and press the Return key
  + Press Control + d

# Talk 2 Exercise 1

<!-- @sec-Talk2Exercise1 -->

- Reminders
  + Give paths:
    - Course working directory - "/project/\<username>"
    - Resources directory - "/project/shared/resources/1_linux"
  + Note down commonly used paths and other important details - Use text editor, OneNote etc.
  + Can open multiple terminals to easily figure out paths
  + Practice using keyboard shortcuts and Tab autocompletion

## Talk 2 Exercise 1 – Files and directories part 1 {#sec-Talk2Exercise1}

Ask instructor for paths to course working directory and resources directory.

1. Log into the server using `ssh`.

```{bash, echo = TRUE, eval = FALSE}
ssh <username>@obds
```

2. Establish your current location in the file system.

```{bash, eval = FALSE}
pwd
```

3. List all the files and directories in your current directory including hidden files, which starts with '.' (full stop). Use ways to get help with commands to figure this out!

```{bash, eval = FALSE}
ls -a
```

4. Change into your course working directory.

```{bash, eval = FALSE}
cd <course working dir>
```

5. Change into the resources directory. List files in and/or explore the directory, try using `tree` command.

```{bash, eval = FALSE}
cd <absolute path>                        # Or
cd <relative path from current location>
ls
tree
```

6. Change into the directory, **1_linux_intro**, in the resources directory.

```{bash, eval = FALSE}
cd <resources dir>/1_linux/1_linux_intro
```

7. View the file **manpage.txt** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`).

```{bash, eval = FALSE}
<command> manpage.txt
```

8. What type of command is `history`? What is it for?

```{bash, eval = FALSE}
type history        # history is a shell builtin
history --help      # To see previously executed commands
# By default, bash command history from current session is written on ~/.bash_history 
# but writing will only happen after you log out, see help of history or better to
# read more online if interested with this file!
```

## File properties and permissions

- `ls -l` used to display file permissions

<!-- ### Notes -->

<!-- The owner does not have to be part of the group that owns the file. -->
<!-- The owner can modify owner permissions. -->
<!-- A member of the group that owns the file can modify group permissions. -->
<!-- Other users can modify permissions if the owner grants them that privilege. -->
<!-- You can have no read permission but still have write permission i.e. you can edit but you do not really see what's in the file (dangerous) -->

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 900px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/ls_long_output_labeled.png")
```

- Permissions in Linux can be assigned to three categories: **owner**, **group**, and **other**

## File permissions - owner

- Linux is a multi-user OS
- So important that access to read, write and execute each file or directory is controlled
- Each file is owned by exactly one **user**

```{r}
#| fig-align: center
#| out-height: 200px
#| out-width: 915px
## Source: https://1000logos.net/unix-logo/#
knitr::include_graphics("img/ls_long_output.png")
```

## File permissions – group & other

- A **group** is a collection of one or more users
- Each user can belong to multiple groups
- A file is owned by exactly one group
- To view your current user groups, use the command:
```
$ groups
```
- The last category that you can assign permissions for is the **other** category
  + Not the file owner and 
  + Not a member of the group that owns the file

## Types of file permissions

- Each permissions category (owner, group and other) can be assigned permissions that restrict their ability to read, write, or execute a file
- For a regular file
  + **Read** permissions are required to read the contents of a file (**open**)
  + **Write** permissions are necessary to **modify** it
  + **Execute** permissions are needed to **run the file** as a program
- For directories
  + **Read** permissions are necessary to **list** the contents of a directory
  + **Write** permissions are required to **modify** the contents of a directory
  + **Execute** permissions allow a user to **navigate** into the directory
- Linux represents these types of permissions using alphabetic or octal notations

## Alphabetic notation

- More verbose and easier to read and write than the octal notation

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 900px
## Source: custom-made (obds_sep2023/02_Introduction_to_the_linux_command_line.pptx, slide 18)
knitr::include_graphics("img/alphabetic_notation.png")
```

## Changing file permissions using alphabetic notation

- Often, changes in file permissions are made to
  + Strategically control access
  + Make valuable files (e.g. raw sequencing data) read-only, to avoid accidentally deleting them
  + Make script files executable
  
- Do not change file permissions to give other users access to your own files and directories
- Instead, contact the system administrators to request directories that are set up with shared access for collaborators 
<!-- (e.g. projects in the CCB cluster) -->
  
## Changing file permissions using alphabetic notation

- We can change file permissions with ``chmod`` using alphabetic notation
- `chmod` \<permission notation> \<file or directory>
  + **u** for user, **g** for group, **o** for other
  + **--** to deny access, **+** to give access
  + **r** for read, **w** for write, **x** for execute
  + **,** (comma) for separating multiple sets of changes 

```
$ chmod u+x,g-w,o-r file1.txt
```
  + u+x - To add execute permission for the user who owns the file 
  + g-w - To remove write permission for the user group assigned to the file 
  + o-r - To remove read permission for every other user 

```
$ chmod go-rwx file1.txt    # Can be bundled together when applying same 
                              permission to user categories      
                              
$ ls -l file1.txt
-rwx------ 1 dsims root 2981 Apr 26  2020 file1.txt
```

# More commands

## Viewing and editing files on the command line using interactive text editors

- No graphical interface or mouse required
- Tools
  + Vim
    - Development started in 1988, widely used, large number of add-ons
    - Can be heavily customised (e.g. keyword highlighting, code auto-completion)
    - But users need to learn a set of keyboard shortcuts
  + Nano -  relatively newer, more basic and so recommended for beginners
- To edit a file, type:
  ```
  $ nano <filename>
  ```

## Working with nano

<span style="color:green;">**DEMO**</span>

- The arrow keys can be used to move the cursor through the file
- Common keyboard shortcuts are displayed at the bottom of the editor
  + The ^ symbol represents the Control key
  + For instance, ^X indicates that pressing the Control + x will exit the interactive text editor
  + Control + k - to delete/cut a line
  + Control + w - to search for a text
  + Control + w + v - to go to end of document

- To save edits made to a file:
  + Press Control + x to initiate the exit from the editor
  + When prompted whether to ‘Save modified buffer’, press Y to confirm (N to discard changes)
  + When prompted for the ‘File Name to Write’, immediately press the Return key to use the current
  file name (or edit file name as needed)
  
## Creating files and directories

<br>

```
$ touch <filename>      # Create new empty file (can create several at a time)
                        # If file exists, will update timestamp to current time
                            
$ nano <filename>       # Open new empty file in nano editor
                        # If file exists, will open file for editing
                                
$ mkdir <dir1>          # MaKe DIRectory
$ mkdir <dir1> <dir2>   # Create multiple new directories
```

## Copying, moving and renaming files

<br>

```
$ cp file1 file2                # CoPy file to new file
$ cp -n file1 file2             # Do not overwrite if file2 exists
$ cp file1 dir1/                # Copy file to new directory
$ cp -r dir1/ dir2/             # 'cp' needs -r to recursively copy contents of 
                                  directories (empty or not) to a new directory 
                                  (does not need to exist beforehand)
                                # If dir2/ already exists, the copy will be 
                                  created inside dir2/


$ mv file1 dir1/file.csv        # MoVe file to new directory and rename 
                                  (-n to not overwrite)
$ mv file1 file1.csv            # Rename file
$ mv dir1/ dir2/                # Rename directory, no need for -r
                                # But if dir2/ exists, dir1/ will be moved to dir2/ 
```

## Deleting files & directories 

<br>

```
$ rm file1                              # ReMove file
$ rm file1.txt file1.csv file2* *.csv   # Remove multiple files, use wildcard (*)
                                        # Also delete all files whose names start with 
                                          file2 and all files that end with .csv
$ rm -r dir1                            # Remove directory and contents     
$ rm -rv dir1                           # Verbosely display list of files to be removed
$ rmdir dir1                            # ReMove DIRectory (empty), will raise an 
                                          error if directory is not empty
$ rmdir dir1 dir2                       # Will only remove empty directories
```

- **<span style="color:red;">There is no undo or recycle bin so be careful when using `rm` !</span>**
  + Particularly with -r (recursive) or '*' (wildcard)
  + **<span style="color:green;">Good news</span>**, you can only remove files you have permission to delete
  
- **<span style="color:green;">Make sure to try the commands you have seen on your own later!</span>**

## Using wildcards

- Wildcards are special characters that match one or more characters in filenames
- Therefore they are used to specify groups of file names matching a pattern
- Main wildcards
  + \* - Matches any sequence of characters 
  + ? - Matches any single character

<!-- - Example globs (term used in Linux): -->
```
$ ls *.jpg                      # Lists all files with the .jpg extension
$ ls sample1*                   # Lists all files which start with sample1
$ ls *temp*                     # Lists all files with temp anywhere in the file name
$ ls file?.*                    # Multiple wildcards can be used in the same pattern
```

## Hard & symbolic links to files and directories

- In cases when you need files to be in multiple places, links to files can be used instead of copying files in multiple places
  + Saves space
  + For more organised and logical file structures
  + Easier to keep files up to date across different places
- A **hard link** is a pointer to the data itself (spot on the hard drive)
- A **symbolic link** (soft link or abbreviated symlinks) is a file that contains a text pointer to the path of a file or directory

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 700px
## Source: https://medium.com/@eitanmayer/hard-vs-symbolic-links-f0584a5d1db5
knitr::include_graphics("img/links.png")
```

## Hard & symbolic links to files and directories

- Symbolic links overcome disadvantages of hard links:
  + Deleting all the hard links to a file will effectively delete the file itself
  + Hard links cannot span physical devices (a server or cluster can have multiple disks)
  + Hard links cannot reference directories but only files

<!-- - The advantage of hard links is that they remain working even when they are moved because they point to the data itself -->
<!-- - Symbolic link becomes unusable if original file is moved or deleted unless the path it points to is updated -->

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 700px
## Source: https://medium.com/@eitanmayer/hard-vs-symbolic-links-f0584a5d1db5
knitr::include_graphics("img/links.png")
```

## Hard & symbolic links to files and directories

- `ln` to create hard and symbolic links
  ```
  $ ln file1 link1.csv            # Create hard link
  $ ln -s file1 link1.csv         # Create symbolic link for a file
  $ ln -s dir1 link1              # Create symbolic link for a directory
  ```
<!-- - Symbolic links can point to target files using absolute or relative paths -->
<!--   + When using absolute paths, symlink will keep working even if it's moved -->
<!--   + When using relative paths (relative to location of symlink), symlink will not work when it is moved -->

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 700px
## Source: https://medium.com/@eitanmayer/hard-vs-symbolic-links-f0584a5d1db5
knitr::include_graphics("img/links.png")
```

# Talk 2 Exercise 2

## Talk 2 Exercise 2 - Files and directories part 2 {#sec-Talk2Exercise2}

1. Change into your course working directory. 

```{bash, eval = FALSE}
cd <course working dir>
```

2. Create a new directory called **1_linux** and change directory into it. 

```{bash, eval = FALSE}
mkdir 1_linux; cd 1_linux
```

Create a directory, **1_linux_intro**, in your **1_linux** directory and change directory into it.

```{bash, eval = FALSE}
mkdir 1_linux_intro; cd 1_linux_intro
```

3. Copy **SRR2121685h_1.fastq** from **1_linux/1_linux_intro/** in resources directory to your **1_linux_intro** directory. You can open a new terminal to help find the path to the file.

```{bash, eval = FALSE}
cp <resources dir>/1_linux/1_linux_intro/SRR2121685h_1.fastq . 
```

4. View the file **SRR2121685h_1.fastq** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`). Also try viewing using a
terminal text editor (making sure not to save unintended edits). 

```{bash, eval = FALSE}
<command> SRR2121685h_1.fastq
```

5. How many lines does the fastq have? How many reads does it have?

```{bash, eval = FALSE}
wc -l SRR2121685h_1.fastq
40 SRR2121685h_1.fastq  # With 40 lines and given 4 lines per read, 10 reads
```

## Talk 2 Exercise 2 - Files and directories part 2

6. Change into your **1_linux_intro** directory and check contents.

```{bash, eval = FALSE}
cd <course working dir>/1_linux/1_linux_intro
ls
```

7. Again, copy **SRR2121685h_1.fastq** from resources directory to your **1_linux_intro** directory. Did you get a warning about overwriting the existing file? If not, what option can you use to get a prompt? What option can you use to not overwrite a file?

```{bash, eval = FALSE}
cp SRR2121685h_1.fastq 1_linux_intro
cp -i SRR2121685h_1.fastq 1_linux_intro
cp -n SRR2121685h_1.fastq 1_linux_intro
```

8. Copy **manpage.txt** from resources directory to your **1_linux_intro** directory. Change the permissions of your copy of **manpage.txt** so that only you have read and write permission.

```{bash, eval = FALSE}
cp <resources dir>/1_linux/1_linux_intro/manpage.txt .
ls -l manpage.txt
chmod go-r manpage.txt
```

9. Create a new directory within your home directory called **obds_linux**.

```{bash, eval = FALSE}
cd ~
mkdir obds_linux
```

10. Change into the created directory & make a copy of your **manpage.txt** but call it **copy.txt**.

```{bash, eval = FALSE}
cd obds_linux
cp <course working dir>/1_linux/1_linux_intro/manpage.txt copy.txt
```

## Talk 2 Exercise 2 - Files and directories part 2

11. Open **copy.txt** in a terminal text editor (e.g. nano), remove the ‘usage’ line and save this modified version as **edit.txt**. 

```{bash, eval = FALSE}
nano copy.txt
```

12. Create a symbolic link to your copy of **SRR2121685h_1.fastq** called **symlink.fastq**. Inspect files with `ls`. View the fastq again using the symlink. 

```{bash, eval = FALSE}
ln -s <course working dir>/1_linux/1_linux_intro/SRR2121685h_1.fastq symlink.fastq
ls -l                     # Notice symlink.fastq pointing to target file 
nano symlink.fastq
```

13. Delete plain text files at the same time.

```{bash, eval = FALSE}
rm *.txt
```

14. Delete the **obds_linux** directory, try using `rmdir` then `rm -ir`. 

```{bash, eval = FALSE}
cd ..
rmdir obds_linux        # Won't work with directory that is not empty
rm obds_linux           # Need -r since obds_linux is a directory
rm -r obds_linux        # Won't prompt at all that directory is not empty
rm -ir obds_linux       # Prompt before every removal
```

## Useful links

- [Classic SysAdmin: The Linux Filesystem Explained](https://www.linuxfoundation.org/blog/blog/classic-sysadmin-the-linux-filesystem-explained)

## References

```{r}
#| results: asis
PrintBibliography(bib)
```
