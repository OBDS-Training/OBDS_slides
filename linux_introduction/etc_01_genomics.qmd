# Talk 1: Genomics on the Linux command line

## Processing genomics data in Linux

- Genomics data arrives as sequence ‘reads’
- Need to process these reads before analysis and interpretation
- Processing tools are designed to work on the Linux command line because:
  + Open-source operating system and software
  + Access to large computational resources fir High Performance Computing 

## Perform using an example RNA-seq workflow

- Goal: Identify differentially expressed genes between conditions
- Most common workflow:

```{r, rnaseq_workflow}
#| fig-align: center
#| out-height: 300px
#| out-width: 825px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 2)
knitr::include_graphics("img/rnaseq_workflow.png")
```

- <span style="color:green;">**So in this week-long Linux course, we will go as far as quantification!**</span>

## Generating a short sequence read 

Illumina platform

:::: {.columns}

::: {.column width="50%"}
- Generate cluster

```{r}
#| fig-align: center
#| out-height: 350px
#| out-width: 450px
## Source: https://en.wikipedia.org/wiki/Illumina_dye_sequencing#/media/File:Cluster_Generation.png
knitr::include_graphics("img/wiki_Cluster_Generation.png")
```
:::

::: {.column width="50%"}
- Sequence

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 400px
## Source: 
knitr::include_graphics("img/illumina_sequencing.png")
```
:::

::::

[An introduction to Next-Generation Sequencing Technology](https://www.illumina.com/content/dam/illumina-marketing/documents/products/illumina_sequencing_introduction.pdf)

## **File format (sequence)**: Raw sequencing data as **FASTQ**

- FASTQ files can have millions of entries
- Usually compressed using gzip to save disk space
- File extensions .fastq, .fq (uncompressed) or .fastq.gz, .fq.gz (compressed)
- For paired-end reads, there are two files usually named _r1.fastq.gz and _r2.fastg.gz
- For paired-end files reads should be in the same order 
- Each entry consists of 4 lines:

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 10)
knitr::include_graphics("img/fastq.png")
```

## Per-base quality score of a read

:::: {.columns}

::: {.column width="35%"}
- Base quality is based on base error probability (**e**)
- Storing **e** (per base) can take up a lot of space, so 
  + **e** → Phred quality score (**Q**) → ASCII code (by adding 33) → single ASCII character
  + **Q** = -10 log~10~ (**e**)
  + Using ASCII code-character aligns quality scores with called bases in FASTQ

```{r}
#| fig-align: center
#| out-height: 180px
#| out-width: 400px
## Source: https://www.illumina.com/documents/products/technotes/technote_Q-Scores.pdf
knitr::include_graphics("img/quality_score_accuracy.png")
```

:::

::: {.column width="65%"}
```{r}
#| fig-align: center
#| out-height: 600px
#| out-width: 1000px
## Source: https://www.illumina.com/documents/products/technotes/technote_Q-Scores.pdf
knitr::include_graphics("img/quality_score_table.png")
```

:::

::::

## RNA-seq workflow and example tools

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 600px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line, slide 10)
knitr::include_graphics("img/rnaseq_workflow_tools.png")
```

## Step 1: Read quality control 

:::: {.columns}

::: {.column width="35%"}

- **FastQC** tool
- Produces an HTML report per FASTQ containing graphical summaries of
  + Base quality scores
  + Sequence content analyses
- Summarises results using a traffic light overview
<!-- 
**MultiQC** tool can be used to compile per-FASTQ reports `r Citep(bib, "#ewels_multiqc_2016")`  
-->

:::

::: {.column width="65%"}

```{r}
#| fig-align: left
#| out-height: 400px
#| out-width: 600px
## Source: [Babraham Bioinformatics](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)
knitr::include_graphics("img/fastqc.png")
```
[Babraham Bioinformatics](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)

:::

::::

## Step 2: Read mapping / alignment

- Find the position(s) in the reference genome where each short read sequence aligns with the fewest mismatches
- String matching problem
- Must allow small differences (sequencing errors or polymorphisms)
- Must be fast (millions of short reads)

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 800px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 13)
knitr::include_graphics("img/alignment.png")
```

- Output: SAM / BAM / CRAM

## **File format (alignment)**: **SAM / BAM / CRAM**

All contain sequence alignment (read mapping) information

:::: {.columns}

::: {.column width="33%"}
- **SAM**

  + **S**equence **A**lignment **M**ap
  + Text file
:::

::: {.column width="33%"}
- **BAM**

  + **B**inary **A**lignment **M**ap
  + Binary representation of SAM
:::

::: {.column width="33%"}
- **CRAM**

  + **C**ompressed **R**eference-oriented **A**lignment **M**ap
  + "More highly compressed alternative to the BAM and SAM" designed by EBI
:::

::::

## Step 3: Read mapping quality control

- What proportion of reads map? 
- What proportion of reads map uniquely to the target genome?
- Do reads map with expected insert size and orientation? 
- Are reads mapping in the right places?
  + Protein coding regions?
  + Has rRNA depletion been successful?
  + Are many reads lost to the mitochondrial genome?

## Step 4: Quantification

- Generate a table of read counts per feature 
  + Rows = Features (Gene/Transcript/Exon) 
  + Columns = Samples 
- Proceed with differential expression analysis (e.g. input to DESeq2 in R)

## RNA-seq processing workflow in Linux

Course outline: 

```{r, rnaseq_workflow}
```

- Mapped reads → Peak calling in ATAC-seq, ChIP-seq, and DNase-seq 

## Useful links

- [Data Wrangling and Processing for Genomics](https://datacarpentry.org/wrangling-genomics/)
- [Curated list of Bioinformatics software](https://github.com/danielecook/Awesome-Bioinformatics)
- [Another curated list of Bioinformatics software](https://github.com/RipollJ/awesome-bioinfo-tools)
- [Reference for different genomics file formats](http://genome.ucsc.edu/FAQ/FAQformat.html)
- [Illumina course on imaging and base calling (Video)](https://support.illumina.com/content/dam/illumina-support/courses/MiSeq_Imaging_and_Base_Calling/story_html5.html)

## References

```{r}
#| results: asis
PrintBibliography(bib)
```


# Bonus topics

## **File format (sequence)**: Reference genome as **FASTA**

- Designed for storing multiple biological sequences
- Compared with FASTQ: 
  + Header lines always start with a ’>’ character (not ‘@’ as in FASTQ) 
  + No quality score information
- Sequence can span multiple lines
- One entry per sequence (chromosome / contig for genome sequences)

<br>

```{r}
#| fig-align: center
#| out-height: 200px
#| out-width: 750px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 13)
knitr::include_graphics("img/fasta.png")
```

## **File format (annotation)**: **BED**

- Genomic intervals
- Can be used to represent coordinates of any genomic feature
  + Exons, introns, repeats, CpG islands, transcription factor binding sites

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 750px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 19)
knitr::include_graphics("img/bed.png")
```

<!-- 

## **File format (annotation)**: **GFF**

## **File format (annotation)**: **GTF**

## Key concepts and considerations

- (Non-) vs. stranded RNA-seq library
- General sequencing considerations
  + Single or paired end?
  + Sequencing depth – how many reads?
    - At least 30M read pairs per sample for PolyA+
   + Read length?
    - Standard 75bp read length fine for differential expression
    - Longer reads better for alternative splicing
- NGS technology (e.g. Illumina technology)

-->