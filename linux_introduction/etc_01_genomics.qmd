# Talk 1: Genomics on the Linux command line

## Processing genomics data in Linux

- Genomics data arrives as sequence ‘reads’
- We need to process these reads before analysis and interpretation
- Processing tools are designed to work on the Linux command line because:
  + Linux is an open-source operating system often used by large computational resources (e.g. High Performance Computing clusters) essential for genomics
- So by being familiar with Linux, we gain access to these processing tools and large computational resources for more efficient workflow

## Learn to process genomics data on Linux using an example RNA-seq workflow

- Example goal of RNA-seq: Identify differentially expressed genes between conditions
- Most common workflow:

```{r, rnaseq_workflow}
#| fig-align: center
#| out-height: 300px
#| out-width: 825px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 2)
knitr::include_graphics("img/rnaseq_workflow.png")
```

- <span style="color:green;">**So in this week-long Linux course, we will go as far as quantification!**</span>

## Generating a short sequence read 

Illumina platform

:::: {.columns}

::: {.column width="50%"}
- Generate cluster

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 400px
## Source: https://en.wikipedia.org/wiki/Illumina_dye_sequencing#/media/File:Cluster_Generation.png
knitr::include_graphics("img/Cluster_Generation.png")
```
:::

::: {.column width="40%"}
- Sequence

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 400px
## Source: 
knitr::include_graphics("img/illumina_sequencing.png")
```
:::

::::

[An introduction to Next-Generation Sequencing Technology](https://www.illumina.com/content/dam/illumina-marketing/documents/products/illumina_sequencing_introduction.pdf)

## **File format (sequence)**: Raw sequencing data as **FASTQ**

- FASTQ files can have millions of entries
- Usually compressed using `gzip` to save disk space (hence the file extension below)
- File extensions .fastq, .fq (uncompressed) or .fastq.gz, .fq.gz (compressed)
- For paired-end reads, there are two files usually named _R1.fastq.gz and _R2.fastq.gz
  + Paired-end sequencing enables both ends of fragment to be sequenced e.g. for better alignment, detecting fusion genes, transcript variants
  + For paired-end files reads should be in the same order 
- Each entry for a read consists of 4 lines:

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 10)
knitr::include_graphics("img/fastq.png")
```

<!-- ### Notes -->

<!-- Because the distance between each paired read is known (based on the insert size selected during library preparation), alignment algorithms can use this information to map the reads over repetitive regions more precisely. This results in much better alignment of the reads, especially across difficult-to-sequence, repetitive regions of the genome. -->

<!-- insert - fragment without sequencing adapters, insert size selected varies based on purpose of experiment -->
<!-- fragment - insert with sequencing adapters -->

## Per-base quality score of a read

:::: {.columns}

::: {.column width="35%"}
- Base quality is based on base error probability (**e**)
- Storing **e** (per base) can take up a lot of space, so 
  + **e** → Phred quality score (**Q** = -10 log~10~ (**e**)) → ASCII code (by adding 33) → single ASCII character
  + So by using single-digit ASCII characters, the base quality representations align with called bases in FASTQ

```{r}
#| fig-align: center
#| out-height: 180px
#| out-width: 400px
## Source: https://www.illumina.com/documents/products/technotes/technote_Q-Scores.pdf
knitr::include_graphics("img/quality_score_accuracy.png")
```

:::

::: {.column width="65%"}

```{r}
#| fig-align: center
#| out-height: 600px
#| out-width: 1000px
## Source: https://www.illumina.com/documents/products/technotes/technote_Q-Scores.pdf
#knitr::include_graphics("img/quality_score_table.png")
```

```{r}
#| fig-align: center
#| out-height: 150px
#| out-width: 800px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 10)
knitr::include_graphics("img/fastq.png")
```

:::

::::

<!-- ### Notes -->

<!-- - Base call accuracy  -->
<!--   + Probability that a given base is called incorrectly by the sequencer -->
<!--   + An incorrect base call probability of 1 in 100, means that every 100 bp sequencing read will likely contain an error -->
<!--   + During a run, error rates can be derived by comparing the called bases to the reference sequence or known control sequences -->

## RNA-seq workflow and example tools

```{r}
#| fig-align: center
#| out-height: 400px
#| out-width: 600px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line, slide 10)
knitr::include_graphics("img/rnaseq_workflow_tools.png")
```

## Step 1: Read quality control 

:::: {.columns}

::: {.column width="35%"}

- **FastQC** tool to summarise base quality data from millions of reads
- Produces an HTML report per FASTQ containing graphical summaries of
  + Base quality scores
  + Sequence content analyses
<!-- 
**MultiQC** tool can be used to compile per-FASTQ reports `r Citep(bib, "#ewels_multiqc_2016")`  
-->

:::

::: {.column width="65%"}

```{r}
#| fig-align: left
#| out-height: 400px
#| out-width: 600px
## Source: [Babraham Bioinformatics](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)
knitr::include_graphics("img/fastqc.png")
```
[Babraham Bioinformatics](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)

:::

::::

## Step 2: Read mapping / alignment

- Find the position(s) in the reference genome where each short read sequence aligns with the fewest mismatches
<!-- - String matching problem -->
- Must allow small differences (sequencing errors or polymorphisms)
- Must be fast (millions of short reads)

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 800px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 13)
knitr::include_graphics("img/alignment.png")
```

- Output: SAM / BAM / CRAM

## **File format (alignment)**: **SAM / BAM / CRAM**

All contain sequence alignment (read mapping) information

:::: {.columns}

::: {.column width="33%"}
- **SAM**

  + **S**equence **A**lignment **M**ap
  + Human-readable text file
:::

::: {.column width="33%"}
- **BAM**

  + **B**inary **A**lignment **M**ap
  + Binary representation of SAM
:::

::: {.column width="33%"}
- **CRAM**

  + **C**ompressed **R**eference-oriented **A**lignment **M**ap
  + "More highly compressed alternative to the BAM and SAM" designed by EBI
:::

::::

## Step 3: Read mapping quality control

- What proportion of reads map? 
- What proportion of reads map uniquely to the target genome?
- Do reads map with expected insert size and orientation? 
- Are reads mapping in the right places?
  + Protein coding regions?
  + Has rRNA depletion been successful?
  + Are many reads lost to the mitochondrial genome?

## Step 4: Quantification

- Generate a table of read counts per feature 
  + Rows = Features (Gene/Transcript/Exon) 
  + Columns = Samples 
- Proceed with differential expression analysis (e.g. input to DESeq2 in R)

## RNA-seq processing workflow in Linux

Course outline: 

```{r, rnaseq_workflow}
```

# Other file formats

## **File format (sequence)**: Reference genome as **FASTA**

- Designed for storing multiple biological sequences
- Compared with FASTQ: 
  + Header lines always start with a ’>’ character (not ‘@’ as in FASTQ) 
  + No base quality score information
- Sequence can span multiple lines

<br>

```{r}
#| fig-align: center
#| out-height: 200px
#| out-width: 750px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 13)
knitr::include_graphics("img/fasta.png")
```

## **File format (annotation)**: **BED**

- Genomic intervals
- Can be used to store coordinates of any genomic feature
  + Exons, introns, repeats, CpG islands, transcription factor binding sites

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 750px
## Source: custom-made (obds_sep2023/01_Genomics_on_the_linux_command_line.pptx, slide 19)
knitr::include_graphics("img/bed.png")
```

<!-- 

## **File format (annotation)**: **GFF**

## **File format (annotation)**: **GTF**

## Key concepts and considerations

- (Non-) vs. stranded RNA-seq library
- General sequencing considerations
  + Single or paired end?
  + Sequencing depth – how many reads?
    - At least 30M read pairs per sample for PolyA+
   + Read length?
    - Standard 75bp read length fine for differential expression
    - Longer reads better for alternative splicing
- NGS technology (e.g. Illumina technology)

-->

# Review concepts

## File types and extensions
 
- Files can be:
  + Plain text - contain only characters of readable materials that can be displayed by most text editors
  + Binary - not plain text (e.g. compiled programs, images)
- Many files follow a standardised internal organisation known as a file format
  + Ensures consistency
  + Enables programs to easily extract defined information
- Adding a file extension can indicate the file format
  + .fasta - biological sequence information
  + .fastq (.fq) - sequence information with quality scores
  + .sam, .bam - alignments of sequences to a reference genome
  + .gtf, .bed - genomic coordinates of sequence features (e.g. exons, peaks)
  
## File types and extensions

- Programs often rely on file extensions in input and output file names
  + Input: To parse file contents based on their format
  + Output: To indicate the format used to write file contents
- Good habit to use an appropriate file extension even just using the generic '.txt' to indicate that the file contains plain text information
- **Changing the file extension itself does not alter the actual content of the file**
  + But a mismatch of file format and file extension may cause errors if a program expects a specific format based on the extension
  
## Computer system terminology

- An **HPC system** e.g. **cluster** is like a massive kitchen with multiple food stations (nodes), each manned by a team of chefs (CPUs) with multiple sous-chefs (cores)

:::: {.columns}

::: {.column width="70%"}

  + **HPC system** - Collection or network of nodes that can run jobs in parallel 
  + **Node** - Each node (e.g. server) is a separate machine that contains its own CPU(s) cores, memory, storage
  + **CPU** - Like the brain of a computer doing all the thinking and calculations
    - **Memory** (random-access memory or RAM)is used by computer to store data temporarily while doing tasks, while **storage** is where files are stored permanently
  + **Core** - A CPU can have multiple cores; each core can handle its own set of jobs / tasks i.e. having multiple cores allows running jobs in parallel
  + **Thread** - A thread is like a smaller unit of work that a core can handle; multiple threads can run on a single core if needed
    - Imagine a sous-chef who can multitask; each task the sous-chef is working on at the same time can be considered a thread

:::

::: {.column width="30%"}

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 600px
## Source: 
knitr::include_graphics("img/hpc_diagram.png")
```

:::

::::

## Useful links

- [Illumina course on imaging and base calling (Video)](https://support.illumina.com/content/dam/illumina-support/courses/MiSeq_Imaging_and_Base_Calling/story_html5.html)
<!-- - [Data Wrangling and Processing for Genomics](https://datacarpentry.org/wrangling-genomics/) -->
- [Reference for different genomics file formats](http://genome.ucsc.edu/FAQ/FAQformat.html)
<!-- - [Curated list of Bioinformatics software](https://github.com/danielecook/Awesome-Bioinformatics) -->
<!-- - [Another curated list of Bioinformatics software](https://github.com/RipollJ/awesome-bioinfo-tools) -->

## References

```{r}
#| results: asis
PrintBibliography(bib)
```