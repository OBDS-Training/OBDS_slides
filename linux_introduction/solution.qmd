---
title: "Solution: Introduction to the Linux command line"
format: html
engine: knitr
execute: 
  eval: false
  echo: true
---

# Day 1 Exercises

## Talk 2 Exercise 1 – Files and directories part 1 {#sec-Talk2Exercise1}

Ask instructor for paths to course working directory and resources directory.

1. Log into the server using `ssh`.

```{bash}
#| echo: true
ssh -J <username>@bastion.imm.ox.ac.uk <username>@obds
```

2. Establish your current location in the file system.

```{bash}
pwd
```

3. List all the files and directories in your current directory including hidden files, which starts with '.' (full stop). Use ways to get help with commands to figure this out! :)

```{bash}
ls -a
```

4. Change into your course working directory.

```{bash}
cd <course working dir>
```

5. Change into the resources directory. List files in and/or explore the directory, try using `tree` command.

```{bash}
cd <absolute path>                        # Or
cd <relative path from current location>
ls
tree
```

## Talk 2 Exercise 1 – Files and directories part 1

6. Change into the directory, **1_linux_intro**, in the resources directory.

```{bash}
cd <resources dir>/1_linux/1_linux_intro
```

7. View the file **manpage.txt** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`).

```{bash}
<command> manpage.txt
```

8. What type of command is `history`? What is it for?

```{bash}
type history        # history is a shell builtin
history --help      # To see previously executed commands
# By default, bash command history from current session is written on ~/.bash_history 
# but writing will only happen after you log out, see help of history or better to
# read more online if interested with this file!
```

## Talk 2 Exercise 2 - Files and directories part 2 {#sec-Talk2Exercise2}

1. Change into your course working directory. 

```{bash}
cd <course working dir>
```

2. Create a new directory called **1_linux** and change directory into it. 

```{bash}
mkdir 1_linux; cd 1_linux
```

Create a directory, **1_linux_intro**, in your **1_linux** directory and change directory into it.

```{bash}
mkdir 1_linux_intro; cd 1_linux_intro
```

3. Copy **SRR2121685h_1.fastq** from **1_linux/1_linux_intro/** in resources directory to your **1_linux_intro** directory.

```{bash}
cp <resources dir>/1_linux/1_linux_intro/SRR2121685h_1.fastq . 
```

4. View the file **SRR2121685h_1.fastq** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`). Also try viewing using a
terminal text editor (making sure not to save unintended edits). 

```{bash}
<command> SRR2121685h_1.fastq
```

5. How many lines does the fastq have? How many reads does it have?

```{bash}
wc -l SRR2121685h_1.fastq
40 SRR2121685h_1.fastq  # With 40 lines and given 4 lines per read, 10 reads
```

## Talk 2 Exercise 2 - Files and directories part 2

6. Change into your **1_linux_intro** directory and check contents.

```{bash}
cd <course working dir>/1_linux/1_linux_intro
ls
```

7. Again, copy **SRR2121685h_1.fastq** from resources directory to your **1_linux_intro** directory. Did you get a prompt asking to overwrite same file? If not, what option can you use to get a prompt? 

```{bash}
cp SRR2121685h_1.fastq 1_linux_intro
cp -i SRR2121685h_1.fastq 1_linux_intro
```

8. Copy **manpage.txt** from resources directory to your **1_linux_intro** directory. Change the permissions of your copy of **manpage.txt** so that only you have read and write permission.

```{bash}
cp <resources dir>/1_linux/1_linux_intro/manpage.txt .
ls -l manpage.txt
chmod go-r manpage.txt
```

9. Create a new directory within your home directory called **obds_linux**.

```{bash}
cd ~
mkdir obds_linux
```

10. Change into the created directory & make a copy of your **manpage.txt** but call it **copy.txt**.

```{bash}
cd obds_linux
cp <course working dir>/1_linux/1_linux_intro/manpage.txt copy.txt
```

## Talk 2 Exercise 2 - Files and directories part 2

11. Open **copy.txt** in a terminal text editor (e.g. nano), remove the ‘usage’ line and save this modified version as **edit.txt**. 

```{bash}
nano copy.txt
```

12. Create a symbolic link to your copy of **SRR2121685h_1.fastq** called **symlink.fastq**. Inspect files with `ls`. View the fastq again using the symlink. 

```{bash}
ln -s <course working dir>/1_linux/1_linux_intro/SRR2121685h_1.fastq symlink.fastq
ls -l                     # Notice symlink.fastq pointing to target file 
nano symlink.fastq
```

13. Delete plain text files at the same time.

```{bash}
rm *.txt
```

14. Delete the **obds_linux** directory, try using `rmdir` then `rm -ir`. 

```{bash}
cd ..
rmdir obds_linux        # Won't work with directory that is not empty
rm obds_linux           # Need -r since obds_linux is a directory
rm -r obds_linux        # Won't prompt at all that directory is not empty
rm -ir obds_linux       # Prompt before every removal
```

## Talk 2 Advanced Exercise 3 - Octal permissions

1. Look up the usage of the `stat` command.

```{bash}
stat --help
man stat
```

2. Display the octal permission/s for file/s in your copy of **1_linux/1_linux_intro** directory, showing only permissions, file names and total size in bytes of files. 

```{bash}
stat -c "%a: %n - %s bytes" *
```

3. Create a new text file called **test.txt** in your **1_linux_intro** and set the file permissions using octal notation to allow read, write and execute access only for you. 

```{bash}
cd <course working dir>/1_linux/1_linux_intro
touch test.txt
chmod 700 test.txt
```

## Talk 3 Exercise 1 - Working with files and streams {#sec-Talk3Exercise1}

1. Copy compressed tar archive **dnase1_new.tar.gz** from resources directory to your **1_linux_intro** directory.

```{bash}
cd <course working dir>/1_linux/1_linux_intro
cp <resources dir>/1_linux/1_linux_intro/dnase1_new.tar.gz .
```

2. Decompress and extract the archive using `tar`. Check if successful. 

```{bash}
tar -xzf dnase1_new.tar.gz      # There will be a directory named 'bed'
```

3. Move into the **bed** directory and count the number of lines in each **.bed** file.

```{bash}
cd bed
wc -l *.bed
```

4. Print the first 5 lines of the file **cpg.bed**. Compress the **cpg.bed** file in place and then head the compressed file. What do you notice about the compressed file?

```{bash}
head -n 5 cpg.bed
gzip cpg.bed
head cpg.bed.gz
```

5. Decompress the **cpg.bed** file in place.

```{bash}
gunzip cpg.bed.gz
ls -l
head cpg.bed
```

## Talk 3 Exercise 1 - Working with files and streams

6. Extract all the lines in **cpg.bed** containing regions on chromosome 5 to a new file called **cpg_chr5.bed**.

```{bash}
grep chr5 cpg.bed > cpg_chr5.bed
```

7. Extract all of the entries EXCEPT those on chr5 to another file called **cpg_nochr5.bed**.

```{bash}
grep -v chr5 cpg.bed > cpg_nochr5.bed
```

How can you check that this command has worked?

```{bash}
wc -l cpg*.bed      # Check if sum of cpg_chr5.bed and cpg_nochr5.bed lines 
                    # equal to cpg.bed lines 
```

8. With the **cpg.bed** file count how many unique intervals (rows) are on each chromosome (column1).
  Hint: you will need to pipe together 3 commands.

```{bash}
cut -f 1 cpg.bed | sort | uniq -c
```

## Talk 3 Exercise 1 - Working with files and streams

9. Use `find` to find all files in your course working directory with 'dnase' in their names. How many are there?

```{bash}
find <course working dir> -type f -name '*dnase*' | wc -l
```

10. Find all the **.bed** files in your course working directory and count the number of lines in each file.

```{bash}
find <course working dir> -type f -name '*.bed' -exec wc -l {} \;
```

## Talk 3 Advanced Exercise 2 - Loops

1. Create files containing subsets of cpg.bed for each chromosome.

```{bash}
cd <course working dir>/1_linux/1_linux_intro/bed
for chr in $(cut -f 1 cpg.bed | sort | uniq)
do
    grep $chr cpg.bed > cpg_${chr}.bed
done
```
