# Day 1 Exercises

## Talk 2 Exercise 1 – Files and directories part 1 {#sec-Talk2Exercise1}

1.Log into the server using `ssh`.

```{bash, eval=FALSE}
ssh -J <username>@bastion.imm.ox.ac.uk <username>@obds
```

2.Establish your current location in the file system.

```{bash, eval=FALSE}
pwd
```

3.List all the files and directories in your current directory including hidden files, which starts with '.' (full stop). Use ways to get help with commands to figure this out! :)

```{bash, eval=FALSE}
ls -a
```

4.Change into your course working directory, **/var/scratch/\<username>**.

```{bash, eval=FALSE}
cd /<path>/<username>
```

5.Change into the resources directory, **/storage/exet4759/resources/**. List files in and/or explore the directory.

```{bash, eval=FALSE}
cd /<path>/resources/       # Absolute path
cd ./<path>/resources/      # Relative path from current directory
ls
```

## Talk 2 Exercise 1 – Files and directories part 1

6.Change into the directory, **1_linux_intro**, in the resources directory.

```{bash, eval=FALSE}
cd /<path>/resources/1_linux/1_linux_intro
```

7.View the file **manpage.txt** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`).

```{bash, eval=FALSE}
<command> manpage.txt
```

8.What type of command is `history`? What is it for?

```{bash, eval=FALSE}
type history        # history is a shell builtin
type --help         # To see previously executed commands 
```

## Talk 2 Exercise 2 - Files and directories part 2 {#sec-Talk2Exercise2}

1.Change into your course working directory. 

```{bash, eval=FALSE}
cd /<path>/<username>
```

2.Create a new directory called **1_linux** and change directory into it. 

```{bash, eval=FALSE}
mkdir 1_linux; cd 1_linux
```
3.Copy **SRR2121685h_1.fastq** from **1_linux/1_linux_intro/** in resources directory to the current directory.

```{bash, eval=FALSE}
cp /<path>/resources/1_linux/1_linux_intro/SRR2121685h_1.fastq . 
```

4.View the file **SRR2121685h_1.fastq** on the command line (try `cat`, `wc`, `head` and `tail`, `more` and `less`). Also try viewing using a
terminal text editor (making sure not to save unintended edits). 

```{bash, eval=FALSE}
<command> SRR2121685h_1.fastq
```

5.How many lines does the fastq have? How many reads does it have?

```{bash, eval=FALSE}
wc -l SRR2121685h_1.fastq 
40      # With 40 lines and 4 lines per read, 10 reads            
```

## Talk 2 Exercise 2 - Files and directories part 2

6.Copy the directory, **1_linux_intro**, from the resources directory to your **1_linux** directory. Check again which files are in there.

```{bash, eval=FALSE}
cp -r /<path>/resources/1_linux/1_linux_intro .
```

7.Move **SRR2121685h_1.fastq** in your **1_linux/** to the copied **1_linux_intro** subdirectory. Did you get a prompt asking to overwrite same file in **1_linux_intro/**? If not, what option can you use to get a prompt? 

```{bash, eval=FALSE}
mv SRR2121685h_1.fastq 1_linux_intro/SRR2121685h_1.fastq
mv -i SRR2121685h_1.fastq 1_linux_intro/SRR2121685h_1.fastq
```

8.Change the permissions of your **manpage.txt** file so that only you have read and write permission

```{bash, eval=FALSE}
cd 1_linux_intro
ls -l manpage.txt
chmod go-r manpage.txt
```

9.Create a new directory within your home directory called **obds_linux**

```{bash, eval=FALSE}
cd ~
mkdir obds_linux
```

10.Change into the created directory & make a copy of **manpage.txt** called **copy.txt**

```{bash, eval=FALSE}
cd obds_linux
cp /<path>/resources/1_linux/1_linux_intro/manpage.txt copy.txt
```

## Talk 2 Exercise 2 - Files and directories part 2

11.Open **copy.txt** in a terminal text editor (e.g. nano) and remove the ‘usage’ line

```{bash, eval=FALSE}
nano copy.txt
```

12.Rename the file to **edit.txt**. 

13.Create a symbolic link to **SRR2121685h_1.fastq** called **symlink.fastq**, and a hard link called **hardlink.fastq**. Inspect files with `ls`. View the fastq again using the links. 

```{bash, eval=FALSE}
ln -s /<path>/resources/1_linux/1_linux_intro/SRR2121685h_1.fastq symlink.fastq
# This won't work because the two locations are in different disks
ln /<path>/resources/1_linux/1_linux_intro/SRR2121685h_1.fastq hardlink.fastq
ls -l                     # Notice symlink.fastq pointing to original 
                          # SRR2121685h_1.fastq path and differences in colours
nano symlink.fastq
```

14.Delete plain text files at the same time.

```{bash, eval=FALSE}
rm -r *.txt
```

15.Delete the obds_linux directory, try using `rmdir` then `rm`. 

```{bash, eval=FALSE}
cd ..
rmdir obds                # Won't work with directory that is not empty
rm                        # Need -r 
rm -r                     # Won't prompt at all that directory is not empty
```

## Talk 2 Advanced Exercise 3 - Octal permissions

1.Look up the usage of the `stat` command.

```{bash, eval=FALSE}
stat --help
man stat
```

2.Display the octal permission for all the files in your copy of **1_linux/1_linux_intro** directory, showing only permissions, file names and total size in bytes of files. 

```{bash, eval=FALSE}
stat -c "%a: %n - %s bytes" *
```

3.Create a new text file called **test.txt** in your course working directory and set the file permissions to allow read, write and execute access for user only using octal notation.

## Talk 3 Exercise 1 - Working with files and streams {#sec-Talk3Exercise1}

1.Find the compressed tar archive **dnase1_new.tar.gz** in your 1_linux directory.

```{bash, eval=FALSE}
cd /<path>/<username>/1_linux/1_linux_intro; ls
```

2.Decompress and extract the archive using `tar`.

```{bash, eval=FALSE}
tar -xzf dnase1_new.tar.gz
```

3.Move into the bed directory and count the number of lines in each .bed file.

```{bash, eval=FALSE}
cd bed; wc -l *.bed
```

4.Print the first 5 lines of the file **cpg.bed**. Compress the **cpg.bed** file in place and then head the compressed file. What do you notice about the compressed file?

```{bash, eval=FALSE}
ls –l
head -n 5 cpg.bed
gzip cpg.bed
ls -l
head cpg.bed.gz
```

5.Decompress the **cpg.bed** file in place.

```{bash, eval=FALSE}
gunzip cpg.bed.gz; ls -l; head cpg.bed
```

## Talk 3 Exercise 1 - Working with files and streams

6.Extract all the lines in **cpg.bed** containing regions on chromosome 5 to a new file called **cpg_chr5.bed**.

```{bash, eval=FALSE}
grep chr5 cpg.bed > cpg_chr5.bed
head cpg_chr5.bed
tail cpg_chr5.bed
wc –l cpg_chr5.bed
```

7.Extract all of the entries EXCEPT those on chr5 to another file called **cpg_nochr5.bed**.

```{bash, eval=FALSE}
grep -v chr5 cpg.bed > cpg_nochr5.bed
```

  How can you check that this command has worked?

```{bash, eval=FALSE}
wc -l cpg*.bed      # Check if sum of cpg_chr5.bed and cpg_nochr5.bed lines 
                    # equal to cpg.bed lines 
```

8.With the **cpg.bed** file count how many intervals (rows) are on each chromosome (column1).
  Hint: you will need to pipe together 3 commands.

```{bash, eval=FALSE}
head cpg.bed 
cut -f 1 cpg.bed | sort | uniq -c
```

9.Find the **.gz** files in the resources directory. How many are there?

```{bash, eval=FALSE}
find /<path>/resources/ -type f -name '*.gz' | wc -l
3
```

10.Find all the **.txt** files in the resources directory and count the number of lines in each file.

```{bash, eval=FALSE}
find /<path>/resources/ -type f -name '*.txt' -exec wc -l {} \;
```

## Talk 3 Advanced Exercise 2 - Loops

1.Create files containing subsets of cpg.bed for each chromosome.

```{bash, eval=FALSE}
for chr in $(cut -f 1 cpg.bed | sort | uniq)
do
    grep $chr cpg.bed > cpg_${chr}.bed
done
```
