---
title: "Solution: Single-cell integration"
author: "Kevin Rue-Albrecht"
date: "2023-06-08"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false
library(Seurat)
```

## Integration without correction

First, we will combine two PBMC data sets without any integration method.

### Import data sets

Import the two PBMC data sets from the files `pbmcv2_filtered.rds` and `pbmcv3_filtered.rds`.

The RDS files contain object that have already been processed through quality control and filtering, as seen in the Seurat day 1 lesson.

```{r}
pbmcv2 <- readRDS("data/pbmcv2_filtered.rds")
pbmcv3 <- readRDS("data/pbmcv3_filtered.rds")
```

### Sanity check

Use the `VlnPlot()` function to visualise the distribution of quality control metrics in the data sets given to you.

It is generally good practice to inspect data sets given to you before taking them any further.

**Hint:**

- Call `VlnPlot()` once for each data set.
- For each data set, focus on the features 'nFeature_RNA', 'nCount_RNA', and 'percent.mt'.

```{r}
plot1 <- VlnPlot(pbmcv2, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"))
plot2 <- VlnPlot(pbmcv3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"))
cowplot::plot_grid(plot1, plot2, ncol = 1)
```

**Can you spot any issue between the two samples?**

> Answer:
> All quality control features seems to reach higher ranges of values in the 'pbmcv3' sample.

### Merge Seurat objects without correction

Use the `merge()` function to create a Seurat object that merges the two data sets without apply any sort of batch correction.

**Hint:**

- Refer to the Seurat tutorial at <https://satijalab.org/seurat/articles/merge_vignette.html>.
- Consider using the argument `add.cell.ids=` to identify cells for each sample of origin in the merged object.

```{r}
pbmc_merged <- merge(
  x = pbmcv2,
  y = pbmcv3,
  add.cell.ids = c("v2", "v3")
)
pbmc_merged
```

Compare the dimensions of the merged Seurat object to those of the two original objects.

```{r}
dim(pbmc_merged)
```


```{r}
dim(pbmcv2)
```

```{r}
dim(pbmcv3)
```

**How do you think the number of features relate across the various objects?**

> Answer:
> The number of features largely overlaps.
> The merged data set contains the union of features observed in all input data sets.
> Features not present in either data set are simply assigned zero counts in the merged object.

### Perform SCTransform normalisation

Do you want to regress any meta.data variables ?

```{r, message = FALSE, warning = FALSE}
pbmc_merged <- SCTransform(
  object = pbmc_merged,
  vars.to.regress = "percent.mt"
)
pbmc_merged
```

Use the `VlnPlot()` to compare the distribution of 'nCount' in the RNA and SCT assays, showing cells from the two samples of origin in separate violins.

**Hint:**

- Look at the help page of the function to use the arguments `features=` and `group.by=` correctly.

```{r}
VlnPlot(
  object = pbmc_merged,
  features = c("nCount_RNA", "nCount_SCT"),
  pt.size = 0.02,
  same.y.lims = TRUE,
  group.by = "orig.ident"
)
```

**How good a job did SCT for the normalisation of sequencing depth between the two data sets, in the merged object?**

> Answer:
> Not too bad, although a shift is still visible.

Make sure the default assay is set to 'SCT'.

```{r}
DefaultAssay(pbmc_merged) <- "SCT"
```

### PCA

Run PCA.

```{r}
pbmc_merged <- RunPCA(pbmc_merged)
```

Visualise the scatter plot of the first two principal components.

```{r}
DimPlot(pbmc_merged)
```

**Can you see a batch effect between the two samples?**

> Answer:
> Yup (sad face).
> What's worse the batch effect is visible along the first principal component,
> meaning it accounts for most of the variance in the data set.

Use the function `ElbowPlot()` to determine a good number of principal components to use in the next steps.

```{r}
ElbowPlot(pbmc_merged, ndims = 50)
```

**How many principal components would you use?**

> Answer:
We typically proceed with 20.

### UMAP

Run the UMAP technique on the chosen number of principal components.

```{r}
pbmc_merged <- RunUMAP(pbmc_merged, dims = 1:20)
```

Visualise the UMAP layout.

```{r}
DimPlot(pbmc_merged, group.by = "orig.ident")
```

**Can you still see the batch effect?**

> Answer:
> Sadly, yes.
> Note that we haven't done anything to correct for it since the PCA,
> so this is really not a surprise.

## Integration using SCTransform

**Hint:**

- Refer to the Seurat tutorial at <https://satijalab.org/seurat/articles/integration_introduction.html#performing-integration-on-datasets-normalized-with-sctransform-1 >.
- The workflow of the 'Seurat v2' integration method varies depending on whether the data sets to merge were normalised using log-normalisation or SCTransform.
- In this exercise, we use the SCTransform approach (the tutorial above discusses both approaches).

### Import data sets

Import the two PBMC data sets (again!) from the files `pbmcv2_filtered.rds` and `pbmcv3_filtered.rds`.

For the purpose of this exercise, it is important to reset the input objects, to undo anything we nay have done to those objects in the previous exercise.

```{r}
pbmcv2 <- readRDS("data/pbmcv2_filtered.rds")
pbmcv3 <- readRDS("data/pbmcv3_filtered.rds")
```

### Preprocessing

Combine the two input Seurat objects into a named list.

```{r}
pbmc_list <- list("v2" = pbmcv2, "v3" = pbmcv3)
pbmc_list
```

Use `lapply()` to run SCTransform on each data set (separately) in the list.

```{r}
pbmc_list <- lapply(
  X = pbmc_list, FUN = SCTransform,
  variable.features.n = 3000, vars.to.regress = "percent.mt"
)
```
