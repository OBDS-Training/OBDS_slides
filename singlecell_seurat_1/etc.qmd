## Overview

```{r}
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-workflow.png")
```

## Partitioning and barcoding

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-height: 200px
## Source: https://www.10xgenomics.com/instruments/chromium-controller
knitr::include_graphics("img/overview-graphic-chromium-svg.svg")
```
:::

::: {.column width="50%"}
### GEM Generation & Barcoding

- GEM: Gel bead-in EMulsions
- Partition single cells, nuclei, or gDNA.
- Objective: one GEM = one cell.
:::

::::

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-height: 200px
## Source: https://www.10xgenomics.com/products/single-cell-gene-expression
knitr::include_graphics("img/barcoding.jpeg")
```
:::

::: {.column width="50%"}
### GEM Generation & Barcoding

Gel beads coated with oligonucleotide barcodes.

- TruSeq primer (fixed)
- UMI barcode (unique, per bead)
- 10x barcode (fixed, per bead)
- A Poly(dT) tail (fixed)
:::

::::

## Empty droplets and doublets

Cells are loaded in a limiting dilution on the 10x Chromium controller, so that:

- Most GEMs do not contain any cell.
- Most of the GEMs that do contain a cell, contain a single cell.
- The rate of GEMs that contain doublets (or more) is as small as technically possible.

```{r}
#| fig-align: center
#| out-height: 300px
#| out-width: 500px
## Source: https://www.technologynetworks.com/genomics/product-news/10x-genomics-extends-their-application-portfolio-305346
knitr::include_graphics("img/10x-genomics-extends-their-application-portfolio-305346-640x360.jpeg")
```

## Quantification

### Cell Ranger (10x Genomics)

```{r}
#| fig-align: center
#| out-height: 200px
#| out-width: 800px
## Source: https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/count
knitr::include_graphics("img/cellranger_count.png")
```

- Most of the time, you will start from FASTQ files.
- [cellranger count](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/count)
  is the method officially supported by 10x Genomics.
- Other methods include
  [salmon alevin](https://salmon.readthedocs.io/en/latest/alevin.html) and
  [kallisto | bustools](https://www.kallistobus.tools/).

In all cases, the objective of quantification is to produce a matrix of UMI counts,
for each feature and each barcode (i.e., cell).

That matrix is the starting point of your analysis using `r BiocStyle::CRANpkg("Seurat")`.

## cellranger count - outputs

```{r}
#| fig-align: center
## Source: https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/overview
knitr::include_graphics("img/cellranger_count_output.png")
```

## Seurat workflow - Overview

```{r}
#| fig-align: center
#| out-height: 550px
#| out-width: 425px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis.png")
```

## Seurat workflow - Create a Seurat object

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-import.png")
```

## Seurat functions

In the coming exercise, we will be using the following functions:

- `Read10X()` with the arguments:
  - `data.dir`
- `CreateSeuratObject()` with the arguments:
  - `counts`
  - `project`
  - `min.cells`
  - `min.features`

## Exercise

### Import scRNA-seq data and create a Seurat object

_Use the [Seurat - Guided Clustering Tutorial](https://satijalab.org/seurat/articles/pbmc3k_tutorial) and read the help page of the suggested functions._

- Load the `r BiocStyle::CRANpkg("Seurat")` package.
- Use `Read10X()` to import data from the directory `filtered_feature_bc_matrix/` 
  as an object named `read10x_data` in your R session.
- Display the first 15 rows and 4 columns of `read10x_data` using the syntax `object[rows, columns]`.
- Display the structure of `read10x_data` using the syntax `str(object)`.
  Can you use the output to describe what a sparse matrix is and how it stores data?
- Use the syntax `dim(object)` function to determine the number of features and barcodes (i.e., cells) in `read10x_data`.
- Use `CreateSeuratObject()` to create a Seurat object.
  Name the object `seurat_object`.
  Include features detected in at least 3 cells,
  and cells where at least 200 features detected.
  Name the project 'pbmc5k'.
  How many features and barcodes are left in the Seurat object?
- Use the syntax `dim(object1) - dim(object2)` to determine how many features and cells were filtered out when you created `seurat_object` based on `read10x_data`.

## Contents of a Seurat object

::: {.small-font-size}
| Slot | Purpose |
| :--- | :------ |
| `assays` | List of `Assay` objects. |
| `meta.data` | `data.frame` of cell metadata. |
| `active.assay` | Name of the active (i.e., default) assay. (character scalar) |
| `active.ident` | Vector of active identity for each cell. (factor) |
| `graphs` | List of `Graph` objects. |
| `neighbors` | List of `Neighbor` objects. Empty unless `return.neighbor = TRUE`. |
| `reductions` | List of `DimReduc` objects. |
| `images` | List of `SpatialImage` objects. |
| `project.name` | Optional user-defined project name. (character scalar) |
| `misc` | Empty list. Users can store miscellaneous information here. |
| `version` | Version of Seurat used when creating the object. |
| `commands` | List of `SeuratCommand` objects. |
| `tools` | Empty list. Tool developers can store any internal data from their methods here. |
:::

::: {.small-font-size}
Sources:

- <https://github.com/satijalab/seurat/wiki/Seurat#slots> (last updated in 2020)
- <https://github.com/satijalab/seurat-object>
:::

## Assay objects

::: {.small-font-size}
| Slot | Purpose |
| :--- | :------ |
| `layers` | List of matrix-like objects (e.g., `counts`, `data`, `scale.data`). |
| `cells` | A `LogMap` object indicating whether each cell is present in each layer. |
| `features` | A `LogMap` object indicating whether each feature is present in each layer. |
| `default` | Index of the default layer. (integer) |
| `assay.orig` | Those slots will be used in the future to track the provenance of individual assays^[1]^. |
| `meta.data` | `data.frame` of feature metadata. |
| `misc` | Empty list. Users can store miscellaneous information here. |
| `key` | Prefix to use for explicitly accessing features from this assay (e.g., `rna_CD3E`). |
:::

::: {.small-font-size}
Sources:

- <https://github.com/satijalab/seurat/wiki/Seurat#slots> (2018)
- <https://github.com/satijalab/seurat-object>
- ^[1]^ <https://github.com/satijalab/seurat/issues/2562#issuecomment-582160681>
:::

## Accessing the contents of a Seurat object

Functions designed to access and interact the contents of a Seurat object are stored in a separate package
called `r BiocStyle::CRANpkg("SeuratObject")`.

- `DefaultAssay()` returns the name of the "active" assay, used by default if unspecified.
- `Assays()` returns the names of the available assays.
- `[[` is a versatile function used to fetch one assay object or one column of cell metadata as a `data.frame`.
  Get all the metadata using empty brackets, i.e. `seurat_object[[]]`.
- `FetchData()` is a generalised version of `[[` that returns multiple pieces of per-cell information as a `data.frame` (e.g., feature expression, dimensionality reduction coordinates, metadata).
  + You need to find out the names of the variables available in the various components of your own Seurat object.
- `$` is used to access one column of cell metadata as a `vector`.
- `LayerData()` returns the (sparse) matrix for a given assay.
  (This used to be `GetAssayData()` in Seurat v4.)

... but a lot of the slots do not have dedicated functions.
Instead they are directly accessed using `@`, e.g. `seurat_object@project.name`.

## Cell identities

Seurat refers to cell identities as an umbrella for a number of things,
from experimental conditions to cluster labels.

- Sorted cells already have some form of identity.
- Clustering at different resolutions produce different set of labels (i.e., different "identities").
  + Seurat stores the "active" identity of cells in a dedicated slot of the object.
- `Idents()` returns the "active" identity of the cells.
- `Idents(seurat_object) <- "name"` assigns the metadata column called `"name"` as the active identity.
- `SetIdent(object, cells = NULL, value)` can be used to assign a new identity to certain cells, e.g.

```{r}
#| echo: true
#| eval: false
SetIdent(seurat_object, cells = 1:10, value = 'B')
```

See `help("Idents", package = "SeuratObject")`.

## Exercise

### Accessing the contents of a Seurat object

_Use the [Seurat - Guided Clustering Tutorial](https://satijalab.org/seurat/articles/pbmc3k_tutorial) and read the help page of the suggested functions._

- Use `DefaultAssay()` to query the name of the active assay in the Seurat object.
- Use `Assays()` to list the names of assays available in the Seurat object.
- Combine `LayerData()` and `[]` to display the first six rows and first four columns of the RNA assay data.
- Combine `head()` and the `[[]]` operator to display the first few rows entire data.frame of per-cell metadata.
- Use the `[[]]` operator to fetch only one column of metadata.
  What type of object do you get back?
- Instead, use the `$` operator to fetch the same column of metadata.
  What type of object do you get back this time?
- Use `FetchData()` to access the metadata column 'nCount_RNA' and the counts of the gene named 'LYZ'.
  Combine this with `head()` to display only the first few rows.
  What type of object do you get back?

## Common operations on Seurat objects

- `WhichCells()` returns the names of cells that match a logical expression.
  + e.g. `WhichCells(seurat_object, expression = LYZ > 300)`
- `VariableFeatures()` returns the names of variable features (for a given assay, if computed).
- `subset()` returns a new Seurat object restricted to certain features and cells.

Those functions are often combined together, to achieve the desired result.
For instance:

```{r}
#| echo: true
#| eval: false
subset(
    x = seurat_object,
    cells = WhichCells(seurat_object, expression = LYZ > 300, slot = "counts"),
    features = VariableFeatures(object = seurat_object)
)
```

- `merge()` combines the information from two Seurat objects into one.

... and more miscellaneous functions such as `colMeans()`, `colSums()`, `rowMeans()` and `rowSums()`.
See `help("Seurat-methods")`.

## Seurat workflow - Quality control and filtering

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-qc-filter.png")
```

## Quality control

<br/>

:::: {.columns}

::: {.column width="50%"}
### Library size

```{r}
#| fig-align: center
ggplot(seurat_object[[]], aes(nCount_RNA)) +
    geom_histogram(color = "black", fill = "grey", bins = 100) +
    cowplot::theme_cowplot()
```
:::

::: {.column width="50%"}
### Number of features detected

```{r}
#| fig-align: center
ggplot(seurat_object[[]], aes(nFeature_RNA)) +
    geom_histogram(color = "black", fill = "grey", bins = 100) +
    cowplot::theme_cowplot()
```
:::

::::

## Computing metrics for quality control

- `PercentageFeatureSet()` computes the fraction of reads assigned to a subset of genes, for each cell.
  + The function takes either a vector of feature names or a regex pattern to match feature names against.

```{r}
#| echo: true
#| eval: false
PercentageFeatureSet(seurat_object, pattern = "^CCL|^CXCL")
```

- `AddMetaData()` is the preferred method to add one or more columns of metadata to a Seurat object (or an `Assay` object).

```{r}
#| echo: true
#| eval: false
seurat_object <- AddMetaData(
   object = seurat_object,
   metadata = PercentageFeatureSet(seurat_object, pattern = "^MT-"),
   col.name = "percent_mt"
)
```

- `VlnPlot()` produces a violin plot for a selection of per-cell features, including gene expression, quality control metrics, and dimensionality reduction results available in a Seurat object.
- `FeatureScatter()` produces a scatter plot of two per-cell features,
  e.g., two features, a feature and quality control metric.

## Seurat visualisations

<br/>

:::: {.columns}

::: {.column width="50%"}
### VlnPlot()

```{r}
#| fig-align: center
Idents(seurat_object) <- "orig.ident"
VlnPlot(seurat_object, features = c("nCount_RNA", "nFeature_RNA"), slot ="counts")
```
:::

::: {.column width="50%"}
### FeatureScatter()

```{r}
#| fig-align: center
Idents(seurat_object) <- "orig.ident"
FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "LYZ", slot = "counts")
```
:::

::::

... but you will likely use `r BiocStyle::CRANpkg("ggplot2")` to make journal-quality plots.

## Exercise

### Quality control and visualisation

_Use the [Seurat - Guided Clustering Tutorial](https://satijalab.org/seurat/articles/pbmc3k_tutorial) and read the help page of the suggested functions._

- The library size and number of features detected per cell are already present in the per-cell metadata of the Seurat object, under the names 'nCount_RNA' and 'nFeature_RNA'.
  Use `VlnPlot()` to display them in a single violin plot.
- Use `PercentageFeatureSet()` to compute the fraction of reads assigned to mitochondrial genes in each cell.
  Combine this with `AddMetaData()` to store the metric in the cell metadata of the Seurat object, under the name 'percent_mt'.
  Finally, use `VlnPlot()` to visualise this new metric alongside the previous two in a new violin plot.
- Use `FeatureScatter()` to sisualise a scatter plot of the proportion of mitochondrial UMIs ('percent_mt') on the Y-axis against the library size ('nCount_RNA') on the X-axis.
- Use `subset()` to create a new Seurat object, called `seurat_after_qc`, that contains only the cells that have more than 4,500 UMI counts, less than 15% of UMI counts assigned to mitochondrial genes, and more than 1,500 genes detected.
- Combine the `ncol()` function with the subtraction operator to determine how many cells were removed in this step.

## Seurat workflow - Normalisation

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-normalise.png")
```

## Normalisation and transformation strategies

### Standard transformation and normalisation methods

- `NormalizeData()` provides a choice of standard normalisation strategies:
  + `"LogNormalize"`, based on the library size for each cell.
  + `"CLR"`, assumes an overall fixed abundance in all cells.
  + `"RC"` (relative counts), `"LogNormalize"` without the "Log".

### sctransform

- `SCTransform()` implements a new normalisation strategy that replaces the commands `NormalizeData()`, `ScaleData()`, and `FindVariableFeatures()`.

This is an advanced topic that will be demonstrated and discussed later in the course.

## Log-normalised feature data

<br/>

:::: {.columns}

::: {.column width="50%"}
### Counts

```{r}
#| fig-align: center
ggplot(FetchData(seurat_object, vars = "LYZ", slot = "counts"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
```
:::

::: {.column width="50%"}
### Log-normalised

```{r}
#| fig-align: center
ggplot(FetchData(seurat_object, vars = "LYZ", slot = "data"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
```
:::

::::

## Exercise

### Normalisation

- Use `NormalizeData()` to normalise the RNA assay of the Seurat object (after quality control) using the 'LogNormalize' method.

### Bonus

- Combine `ggplot()` and `FetchData()` to visualise the distribution of raw counts and normalised data for a gene of your choice.

## Seurat workflow - Variable features and scaling

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-variable-scaling.png")
```

## Identifying variable features

Motivations:

- Variability = information.
- Driving force for dimensionality reduction and clustering.

<br/>

:::: {.columns}

::: {.column width="50%"}
### Boring ...

```{r}
#| fig-align: center
#| fig-height: 4
ggplot(FetchData(seurat_object, vars = "RPL22", slot = "data"), aes(RPL22)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
```
:::

::: {.column width="50%"}
### Exciting !

```{r}
#| fig-align: center
#| fig-height: 4
ggplot(FetchData(seurat_object, vars = "LYZ", slot = "data"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
```
:::

::::

## Identifying variable features in Seurat

- `FindVariableFeatures()` identifies features that show the highest amount of variability relative to their mean expression.
- `VariableFeaturePlot()` produces a "mean-variance" scatter plot that is good for diagnostics.

::: {.callout-note}
**Heteroscedasticity**: feature with higher mean expression naturally have more room for larger variance.
:::

:::: {.columns}

::: {.column width="50%"}
### Actual variance

```{r}
#| fig-align: center
#| fig-height: 4
ggplot(HVFInfo(seurat_object), aes(mean, variance)) +
  geom_point() +
  scale_x_log10() +
  cowplot::theme_cowplot()
```
:::

::: {.column width="50%"}
### Standardised variance

```{r}
#| fig-align: center
#| fig-height: 4
#| warning: false
VariableFeaturePlot(seurat_object)
```
:::

::::

## Scaling data

Many methods for downstream analysis work better when features are brought back to a comparable range of values.

- Features naturally present different dynamic ranges.
- Biologically important features do not necessarily vary by a large absolute amount.

`ScaleData()` scales and centers features.

- Cell metadata and quality metrics can be regressed out to remove unwanted sources of variation (e.g. batch effects and technical artifacts).

## Exercise

### Variable features and scaling

- Use `FindVariableFeatures()` to identify variable features in the normalised RNA assay of the Seurat object.
  Use the 'vst' method and select the 2,000 most variable features.
  What does this subsetting do, and what are our motivations for doing it?
- Combine `VariableFeatures()` and `head()` to display the names of the first few variable features in the Seurat object.
  How can you control which assay the variable features are pull from?
- Use `VariableFeaturePlot()` to visualise the scatter plot of standardised variance against average expression.
  How would you use this plot?
- Use `ScaleData()` to scale the normalised RNA assay of the Seurat object, regressing the the fraction of UMI counts assigned to mitochondrial features.
  What are the motivations for removing that source of variation?

## Seurat workflow - Dimensionality reduction

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-dimensionality.png")
```

## Dimensionality reduction

By nature, omics data sets survey a large number of features (e.g., tens of thousands of known genes in the human genome).
Dimensionality refers to the number of features measured for each cell.

- High dimensionality is prohibitively costly in time to generate and visualise all (pairs of) features.
- Dimensionality reduction techniques identify/compute a smaller number of dimensions that summarise major axes of variation in the data.
  + e.g.,
    [PCA](https://doi.org/10.1080/14786440109462720),
    [t-SNE](http://jmlr.org/papers/v9/vandermaaten08a.html),
    [UMAP](https://doi.org/10.21105/joss.00861),
    [ivis](https://doi.org/10.21105/joss.01596),
    etc.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
Seurat::DoHeatmap(
    object = seurat_object,
    features = head(VariableFeatures(seurat_object), 100)
)
```
:::

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
Idents(seurat_object) <- "orig.ident"
DimPlot(seurat_object, reduction = "umap")
```
:::

::::

## Dimensionality reduction in Seurat

- `RunPCA()` runs a principal component analysis and stores the output inside the Seurat object itself.
- `PCAPlot()` displays a scatter plot of two principal components.
- `DimPlot()` is a versatile function used to plot any dimensionality reduction result available in the object, e.g.

```{r}
#| echo: true
#| eval: false
DimPlot(..., reduction = "pca", ...)
```

- Other specialised functions are available, e.g. `TSNEPlot()`, `UMAPPlot()`.
- `Reductions()` returns the names of the available dimensionality reduction results.
- `ElbowPlot()` describes the amount of variance explained by the top principal components.

## Exercise

### Dimensionality reduction

- Use `RunPCA()` to run a principal component analysis on the Seurat object.
  Which features are used by the method in the default settings?
  How could you change this?
  How do you read the message displayed by the function `RunPCA()`?
- Use `Reductions()` to list the names of dimensionality reduction results available in the Seurat object.
- Use `PCAPlot()` or `DimPlot()` to produce a scatterplot of the first and second PCA components.

### Bonus

- Use `ggplot()` to make a scatterplot of the first and second PCA components.
- Use `ElbowPlot()` to visualise the amount of variance explained by the principal components that capture most variance.
  Use argument `ndims` to control the number of principal components to plot.
  How many principal components would you use for downstream analyses?
- Use `RunUMAP()` to run the UMAP technique on your selected number of principal components.
- Use `UMAPPlot()` to visualise the UMAP layout.

## Seurat workflow - Clustering

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-clustering.png")
```

## Clustering

Although we process individual cells, patterns only emerge when we identify and consider groups of related cells.

- e.g., cell types, sub-types, activation states.
- even continuous trajectories measured as pseudotime often rely on known stages and bottlenecks.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
Idents(seurat_object) <- "orig.ident"
UMAPPlot(seurat_object)
```
:::

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
Idents(seurat_object) <- "RNA_snn_res.0.3"
UMAPPlot(seurat_object, label = TRUE, label.size = 8)
```
:::

::::

::: {style="text-align: center;"}
There is no "correct" clustering.

Clustering should be seen as a tool used to interpret data at certain resolutions.
:::

## Clustering in Seurat

By nature, clustering requires algorithms to compare cells to one another.
Increasingly large data sets are prohibitively costly in time and memory to compute the distance between every pair of data points.

- `FindNeighbors()` identifies the $k$ nearest neighbours for each data point.
  Subsequent steps will only consider those nearest neighbours, saving time and memory.
- `FindClusters()` identifies clusters using an algorithm that processes a graph of shared nearest neighbours (SNN).
- `DimPlot(..., label = TRUE, ...)` adds active identities as labels at the average coordinate of each group of cells.

### Accessing results

- `Graphs()` returns the names of available graphs in the Seurat object.
- Cluster labels are stored as cell metadata.
- The latest run `FindClusters()` overwrites the metadata column `seurat_clusters`, in addition to storing labels in its own column of metadata.

## Exercise

### Clustering

- Use `FindNeighbors()` to compute the graph of nearest neighbours.
  Use the argument `dims=` to specify the set of principal components that you have chosen earlier.
  Which principal components are used by default?
- Use `Graphs()` to display the names of the nearest neighbour graphs that are now stored in the Seurat object.
- Use `FindClusters()` to identify clusters in the data set.
  Set the argument `resolution=` to `0.5`.
  What is the default setting for the `resolution=` argument?
  Do you expect more or fewer clusters following that change?
  What other parameters would you also try to experiment with?
- Use `UMAPPlot()` to visualise the cluster labels on the UMAP scatter plot.
  How would you describe the agreement between the UMAP layout and the clustering results?

## Seurat workflow - Cluster markers

```{r}
#| fig-align: center
#| out-height: 525px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-markers.png")
```

## Identify cluster markers

The interpretability of clusters relies on the ability to identify features acting as markers (positive or negative) that distinguish clusters from each other.

- The quality of markers depends on the quality of clustering, which in turns depends on every choice made in earlier steps of the analysis.
- Clustering, marker identification, and downstream analyses often form an iterative process to achieve sensible and interpretable results.

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
ggplot(FetchData(seurat_object, vars = c("umap_1", "umap_2", "RNA_snn_res.0.3")), aes(umap_1, umap_2, color = RNA_snn_res.0.3)) +
    geom_point(size = 1) +
    cowplot::theme_cowplot()
```
:::

::: {.column width="50%"}
```{r}
#| fig-align: center
#| fig-height: 5
ggplot(FetchData(seurat_object, vars = c("umap_1", "umap_2", "CD3E")), aes(umap_1, umap_2, color = CD3E)) +
    geom_point(size = 1) +
    cowplot::theme_cowplot()
```
:::

::::

## Heat map of cluster markers

```{r}
#| fig-align: center
#| fig-height: 6
#| fig-width: 8
Idents(seurat_object) <- "RNA_snn_res.0.3"
markers_top10_clusters <- seurat_markers_all %>%
    group_by(cluster) %>%
    top_n(n = 10, wt = avg_log2FC)
DoHeatmap(
    seurat_object,
    features = markers_top10_clusters$gene
)
```

::: {style="text-align: center;"}
**Markers shared by multiple clusters: true biology or over-clustering?**
:::

## Identifying cluster markers in Seurat

- `FindAllMarkers()` tests features for differential expression between each cell identity and all other cell identities.
- `FindMarkers()` performs a single comparison between two sets of cells.
  + If only one group of cells is given, it is implied that the second group comprises every other cell in the data set.
- `FindConservedMarkers()` takes an additional grouping variable from the cell metadata (e.g., batch),
  performs differential expression for each cluster within each level of the grouping variable, 
  and identifies markers that are robust for each cell identity across the groups.
- `FeaturePlot()` is similar to `DimPlot()` but specialises in coloring data points with feature data (rather than cell metadata).
- `DoHeatmap()` conveniently summarises the top markers for each cluster in a single view.

## Exercise

### Identify cluster markers

- Use `FindAllMarkers()` to identify positive markers for all clusters,
  keeping only markers that are detected in at least 25% of the target cluster,
  and with a log fold-change greater than `0.25`.
  Assign the result to an object named `seurat_markers_all`.
  How do you control the set of clusters that are used?
- Use `class()` to display the class of `seurat_markers_all`.
- Use `head()` to display the first few rows of the object `seurat_markers_all`.
  How do you read the contents of that object?
  How do you know which features are the markers of each cluster?
- Combine `subset()` and `head()` to filter and display the first few markers for cluster `3`.
- Use `FeaturePlot()` to visualise the expression of the first 4 marker for cluster `3` on a UMAP layout.
  You may want to combine the function `subset()` and the `[]` operator to select the gene names to visualise.
- Visualise the expression of those same 4 marker as a violin plot.
  Do you have any particular preference between the two types of plots?
- Use `DoHeatmap()` to visualise the top 10 (positive) markers for each cluster.
  You may want to use `dplyr::group_by()` and `dplyr::slice_max()` to select the genes to visualise.
  You may also want to use `unique()` to avoid any duplicated gene names in the cluster markers.

## Further reading

- [Seurat - Guided Clustering Tutorial](https://satijalab.org/seurat/articles/pbmc3k_tutorial.html)

and many more tutorials in the [Seurat documentation website](https://satijalab.org/seurat/index.html).

## References

```{r}
#| results: asis
PrintBibliography(bib)
```
