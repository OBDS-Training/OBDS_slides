---
title: "Solution: Single-cell analysis using Seurat, part 2"
author: "Kevin Rue-Albrecht & Liezel Tamon"
date: "2024-04-23"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false
library(Seurat)
library(tidyverse)
library(gprofiler2)
```

## Goal

Compare clustering results following standard "LogNormalize" normalisation and "SCTransform" normalisation.

## Exercise

### Import data

- Use `readRDS()` to import a preprocessed object from the file `seurat_after_qc.rds` provided.

This object is the result of the Seurat workflow that we performed together yesterday.
It is given to you again today to make sure we all start from the same point here.

```{r}
seurat_after_qc <- readRDS("data/seurat_after_qc.rds")
```

- Display the Seurat object.

This is generally good practice, to keep a record of how your object looks at different stages of the analysis.

```{r}
seurat_after_qc
```

### Default assay

- Use `DefaultAssay()` to check the name of the active assay.

This is best practice before using Seurat functions that rely on the active assay.

```{r}
DefaultAssay(seurat_after_qc)
```

### SCTransfrom

- Use `SCTransform()` on the Seurat object to apply the SCTransform method.

**Hint:**

- Refer to the SCTransform vignette available at <https://satijalab.org/seurat/articles/sctransform_vignette.html>.
- Consider confounding variables to specify in the argument `vars.to.regress=`.
- Consider the number of variable features to specify in the argument `variable.features.n=`.

```{r}
seurat_after_qc <- SCTransform(
  object = seurat_after_qc,
  assay = "RNA",
  vars.to.regress = "percent_mt"
)
```

**Note:** The `SCTransform()` function effectively replaces the workflow performed by the functions `NormalizeData()`, `ScaleData` and `FindVariableFeatures()`.

- Display the Seurat object again.

```{r}
seurat_after_qc
```

**What changed since you last displayed the object? Where are the normalised data stored?**

> Answer:
>
> The number of features in the object has changed.
> It nearly doubled, which can be explained by the fact that there are now two assays in the object: 'RNA' and 'SCT'.
> 
> The active assay has changed from 'RNA' to 'SCT'.

**Note:** 

- The 'SCT' assay may have less features than the 'RNA' assay because `SCTransform()` calls `sctransform::vst()` with default argument `min_cells = 5`, which only retains features detected in at least 5 cells.

### Explore SCTransform results

- Display the cell metadata stored in the object.

This is good practice to keep track of information stored in the object.

```{r}
head(seurat_after_qc[[]])
```

**Can you see any new column(s) in the metadata?**

> Answer:
> 
> There are two new columns called 'nCount_SCT'. and 'nFeature_SCT'.

### Visualise SCTransform results

- Use `VlnPlot()` to compare the total counts in the 'RNA' and 'SCT' assays.

**Hint:**

- Force the function to apply the same Y-axis range to all panels in each plot, to make comparisons easier.
- The original library size (in the 'RNA' assay) is already present in the cell metadata as `nCount_RNA`.
- `SCTransform` automatically adds two columns of cell metadata for library and number of features detected after SCT normalisation, as `nCount_SCT` and `nFeature_SCT`.

```{r}
VlnPlot(
  object = seurat_after_qc,
  features = c("nCount_RNA", "nCount_SCT"),
  same.y.lims = TRUE
)
```

- Do the same thing to compare the number of features detected in the two assays.

```{r}
VlnPlot(
  object = seurat_after_qc,
  features = c("nFeature_RNA", "nFeature_SCT"),
  same.y.lims = TRUE
)
```

## Bonus

### Visualise a feature in the SCT assay

- For the feature of your choice (e.g., 'LYZ'), using the 'SCT' assay, compare the distribution of:
  - raw count data in the 'counts' slot.
  - log-normalised counts in the 'data' slot
  - scaled log-normalised counts in the 'scaled' slot.

**Hint:**

- For each plot, pass the output of `FetchData()` to `ggplot()`.
- Store each plot as a separate object.
- Use cowplot::plot_grid() to combine all the plots into a single image.

```{r}
#| fig.height = 10
DefaultAssay(seurat_after_qc) <- "SCT"
ggplot_lyz_raw <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "counts"), aes(LYZ)) +
  geom_histogram(fill = "grey", color = "black", bins = 100) +
  coord_cartesian(ylim = c(0, 500)) + 
  ggtitle("counts") +
  cowplot::theme_cowplot()
ggplot_lyz_normalised <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "data"), aes(LYZ)) +
  geom_histogram(fill = "grey", color = "black", bins = 100) +
  coord_cartesian(ylim = c(0, 500)) +
  ggtitle("data") +
  cowplot::theme_cowplot()
ggplot_lyz_scaled <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "scale.data"), aes(LYZ)) +
  geom_histogram(fill = "grey", color = "black", bins = 100) +
  coord_cartesian(ylim = c(0, 500)) +
  ggtitle("scaled") +
  cowplot::theme_cowplot()
cowplot::plot_grid(
  ggplot_lyz_raw,
  ggplot_lyz_normalised,
  ggplot_lyz_scaled, ncol = 1)
```

## Exercise

### Variable features

- Combine `VariableFeatures()` and `head()` to display the first 10 variable genes in the 'SCT' assay.

**Hint:**

- For `VariableFeatures()`, use the `assay=` argument to specify the assay to use.
- For `head()`, use the `n=` argument to specify how many genes to display.

```{r}
head(VariableFeatures(seurat_after_qc, assay = "SCT"), n = 10)
```

- Repeat the same task for the 'RNA' assay.

```{r}
head(VariableFeatures(seurat_after_qc, assay = "RNA"), n = 10)
```

- Combine the code above with `length()` and `intersect()` to display the number of genes that overlap the two subsets of variable genes.

```{r}
length(intersect(
  head(VariableFeatures(seurat_after_qc, assay = "SCT"), 10),
  head(VariableFeatures(seurat_after_qc, assay = "RNA"), 10)
))
```

**How many genes overlap? What is your takeaway message from it?**

> Answer:
> 
> Seven genes overlap, which is more than half, which is encouraging!

<!-- TODO: determine what controls the order of the variable genes returned. Are they ordered by variance? -->

### Dimensionality reduction on SCT transformed data

- First, use `DefaultAssay()` to display the active assay (again!).

It is best practice to check that the active assay is correct before key steps when working with Seurat.
Even better, it doesn't hurt to set the active assay to the desired one explicitly, to avoid any doubt.

```{r}
DefaultAssay(seurat_after_qc)
DefaultAssay(seurat_after_qc) <- "SCT"
```

- Use `RunPCA()` to run a principal component analysis on the Seurat object.

**Hint:**

- Set the argument `reduction.name=` to something other than 'pca', to avoid overwriting the existing PCA results based on the RNA assay.
  For instance, you could use 'sct.pca'.
  
```{r}
seurat_after_qc <- RunPCA(seurat_after_qc, reduction.name = "sct.pca")
```

- Use `Reductions()` to display the name of the dimensionality reduction results present in the Seurat object at this point.

It is good practice to keep track of information stored in the object throughout the workflow.

```{r}
Reductions(seurat_after_qc)
```

### PCA elbow plot

- Use `ElbowPlot()` to produce a plot that shows the amount of variance explained by the top principal components (by amount of variance captured).

**Hint:**

- Use the argument `ndims=` to control the number of principal components displayed (up to the number of principal components computed earlier).
- Use the `reduction=` argument to specify the dimensionality reduction result to use.
  
```{r}
ElbowPlot(seurat_after_qc, ndims = 50, reduction = "sct.pca")
```

**How many principal components would you use for downstream analyses?**

> Answer:
> We typically use the first 20 principal components in this lesson.

### UMAP

- Use `RunUMAP()` on the Seurat object, using the first 20 principal components computed earlier.

**Hint:**

- Use the argument `reduction=` to specify the dimensionality reduction result to use.
- Set the argument `dims=` to specify the principal components to use.
- Set the argument `reduction.name=` to something other than "umap", to avoid overwriting the existing UMAP results based on the RNA assay. For instance, you could use "sct.umap".

```{r}
seurat_after_qc <- RunUMAP(
  object = seurat_after_qc,
  dims = 1:20,
  reduction = "sct.pca",
  reduction.name = "sct.umap"
)
```

- Use `DimPlot()` (twice) to display the two UMAP plots obtained using the RNA and SCT assays, respectively.

**Hint:**

- Use the `DimPlot()` function to produce each plot.
- Save each plot as a separate ggplot object.
- Use the `+` operator form the 'patchwork' package or the function `cowplot::plot_grid()` to combine the ggplot objects into a single image.

```{r, fig.width=10}
plot1 <- DimPlot(seurat_after_qc, reduction = "umap") + 
  ggtitle("RNA UMAP")
plot2 <- DimPlot(seurat_after_qc, reduction = "sct.umap") +
  ggtitle("SCT UMAP")
plot1 + plot2
```

### Clustering

- Use `FindNeighbors()` to compute the graph of nearest neighbours.

**Hint:**

- Set the argument `dims=` to specify the principal components to use.
- Use the argument `reduction=` to specify the dimensionality reduction result to use.
  
```{r}
seurat_after_qc <- FindNeighbors(
  object = seurat_after_qc,
  dims = 1:20,
  reduction = "sct.pca"
)
```

- Use `FindClusters()` to compute a cluster label for each cell.

**Hint:**

- Set the argument `resolution=` to the value `0.5`. There is no right or wrong answer; we just want to have the same results here.
- 

```{r}
seurat_after_qc <- FindClusters(
  object = seurat_after_qc,
  resolution = 0.5
)
```

**Note:**

- If unspecified, the argument `graph.name=` will concatenate the name of the active assay with '_snn' to determine the graph to use; [source code](https://github.com/satijalab/seurat/blob/c54e57d3423b3f711ccd463e14965cc8de86c31b/R/clustering.R#L433).
- Higher resolution, more clusters.

- For the record, use `Graphs()` to display the name of the graphs present in the Seurat object.

```{r}
Graphs(seurat_after_qc)
```

## Bonus

### Compare cluster labels using SCT and RNA assays

- Combine `colnames()` and `[[]]` to display the name of the columns of cell metadata present in the Seurat object.

```{r}
colnames(seurat_after_qc[[]])
```

- Use `table()` to compare the number of cells assigned to each cluster using the 'SCT' and 'RNA' assays, respectively.

**Hint:**

- Given two vectors of cluster labels, `table()` will display a table counting the number of cells assigned to each combination of cluster labels.
- Use the names of cell metadata columns displayed above to identify the two columns that contain the two sets of cluster labels.
- Name the arguments given to `table()`, for instance 'RNA' and 'SCT', to make the output easier to read and intepret.

```{r}
table(
  RNA = seurat_after_qc$RNA_snn_res.0.5,
  SCT = seurat_after_qc$SCT_snn_res.0.5
)
```

## Exercise

### Visualise cluster labels on the UMAP layout

Color cells by their cluster label in a scatter plot of UMAP coordinates, both based on the SCT assay.
Compare this with the same plot based on the RNA assay.

**Hint:** Use the `DimPlot()` function to generate the two plots and combine them as you did earlier.

```{r}
plot1 <- DimPlot(
  object = seurat_after_qc,
  reduction = "umap",
  group.by = "RNA_snn_res.0.5",
  label = TRUE) +
  ggtitle("RNA UMAP")

plot2 <- DimPlot(
  object = seurat_after_qc,
  reduction = "sct.umap",
  group.by = "SCT_snn_res.0.5", 
  label = TRUE) +
  ggtitle("SCT UMAP")

plot1 + plot2
```

**How would you describe the agreement between the UMAP layout and clustering for SCT vs RNA Assay results?**

> Answer:
> Not too bad.
> Additional clusters after SCT.
> Cells assigned to the same cluster seem to group more cleanly in the SCT workflow.

### Visualise gene expression on the UMAP layout

Colors cells by the expression level of common cell type markers in PBMC data sets.

**Hint:**

- CD14^+^ monocytes: LYZ, CD14
- CD16 monocytes: FCGR3A, MS4A7
- CD4^+^ T cells:  CD4, IL76
- CD8^+^ T cells: CD8A, CD3D
- NK cells: GNLY, GZMB,NKG7
- B cells:  MS4A1 , CD79A
- DC: CST3, FCER1A
- Platelets: PPBP

```{r, fig.width=10, fig.height=8}
FeaturePlot(
  object = seurat_after_qc,
  features = c("LYZ","FCGR3A","CD4","CD8A","GNLY","MS4A1","CST3","PPBP"),
  reduction = "sct.umap"
)
FeaturePlot(
  object = seurat_after_qc,
  features = c("LYZ","FCGR3A","CD4","CD8A","GNLY","MS4A1","CST3","PPBP"),
  reduction = "umap"
)
```

**Would you say that SCT improves the appearance of the plots?**

> Answer:
> The two layouts are fairly comparable, visually.

## Bonus

### Cluster markers (SCT)

Use the function `FindAllMarkers()` to compute markers for the clusters obtained using the SCT assay.

**Hint:**

- Set the identities that should be used by the `FindAllMarkers()` method.
- Look at the help page for the various arguments relevant to you.
- Force the function to use the 'SCT' assay.
- Force the function to return only positive markers.
- Force the function to exclude any gene detected in fewer than 25% of each target cluster.
- Force the function to exclude genes with log fold-change values lower than 0.25.

```{r}
Idents(seurat_after_qc) <- "SCT_snn_res.0.5"
markers_all_sct <- FindAllMarkers(
    seurat_after_qc,
    assay = "SCT",
    only.pos = TRUE,
    min.pct = 0.25,
    logfc.threshold = 0.25
)
```

### Cluster markers (RNA)

Do the same to compute markers for the clusters obtained using the RNA assay. 

```{r}
Idents(seurat_after_qc) <- "RNA_snn_res.0.5"
markers_all <- FindAllMarkers(
    seurat_after_qc,
    assay = "RNA",
    only.pos = TRUE,
    min.pct = 0.25,
    logfc.threshold = 0.25
)
```

### Over-representation analysis

Use gprofile2 to perform pathway over-representation analysis (ORA) on cluster markers (i.e, genes differentially expressed between clusters) and visualise the results.

**Hint:**

- Filter the cluster markers on adjusted p-value and log fold-change.
- Make a named list of cluster markers (i.e., each item in the list is a vector of gene symbols, each named after the cluster those markers correspond to).
  The `split()` function is a good tool to do this in a single step.
- Give that list of cluster markers (all markers for all clusters at once) to the `gprofiler::gost()` function.
- Set the default assay to 'SCT' and extract the rownames to use as custom background.

```{r}
markers_filtered <- markers_all_sct %>% 
    dplyr::group_by(cluster) %>% 
    filter(p_val_adj < 0.05) %>% 
    filter(avg_log2FC > 0.585) %>%
    dplyr::select(cluster,gene)
markers_list <- split(
  x = markers_filtered$gene,
  f = markers_filtered$cluster
)
DefaultAssay(seurat_after_qc) <- "SCT"
markers_background <- rownames(seurat_after_qc)
gost_sct <- gprofiler2::gost(query = markers_list, custom_bg = markers_background)
```

For instance, subset the results to the biological pathways enriched for markers of cluster '0'.

```{r}
head(subset(gost_sct$result, query == "0" & source == "GO:BP"))
```

