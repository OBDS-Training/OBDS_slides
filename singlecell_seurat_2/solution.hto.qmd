---
title: "Solution: Single-cell analysis using Seurat, part 2 (HTO)"
author: "Kevin Rue-Albrecht"
date: "2023-06-08"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false
library(Seurat)
```

## Goal

Demultiplexing with hashtag oligos (HTOs).

- Single cells collected from four cell lines: HEK, K562, KG1 and THP1.
- Each cell line was further split into three samples (12 samples in total).
- Each sample was labelled with a hashing antibody mixture (CD29 and CD45), pooled, and run on a single channel of 10X.
- Based on this design, we should be able to detect doublets both across and within cell types.

## Exercise

### Read in the HTO and UMI matrices

Import the UMI data from the file `hto12_umi_mtx.rds` and check its class.

```{r}
umi_data <- readRDS("data/hto12_umi_mtx.rds")
class(umi_data)
```

Check its dimensions.

```{r}
dim(umi_data)
```


Import the HTO data from the file `hto12_hto_mtx.rds` and check its class.

```{r}
hto_data <- readRDS("data/hto12_hto_mtx.rds")
class(hto_data)
```

Check its dimensions.

```{r}
dim(hto_data)
```

### Cleanup

Subset the HTO data frame to only include barcodes present in the UMI matrix.

**Hint:**

- Create a character vector that is the intersection of barcodes in the UMI matrix and HTO data frame.
- Use that character vector to subset to HTO data frame.

```{r}
joint_barcodes <- intersect(rownames(hto_data), colnames(umi_data))
length(joint_barcodes)
```

Subset the UMI matrix to include only the joint barcodes, and check the dimensions of the output matrix.

```{r}
umi_data_common <- umi_data[, joint_barcodes]
dim(umi_data_common)
```

### Seurat

Create a Seurat object from the UMI count matrix made of the common barcodes.

**Hint:**

- Include only features detected in at least three cells.
- Include only cells with at least 200 features detected.

```{r}
seurat_citeseq <- CreateSeuratObject(
  counts = umi_data_common,
  min.cells = 3,
  min.features = 200
)
```

### Preprocessing

Apply the sequence of functions `NormalizeData()`, `FindVariableFeatures()`, and `ScaleData()`.

**Hint:**

- Use the selection method 'vst' to find variable features.
- Scale data only for the variable features.

```{r}
seurat_citeseq <- NormalizeData(seurat_citeseq)
seurat_citeseq <- FindVariableFeatures(seurat_citeseq, selection.method = "vst")
seurat_citeseq <- ScaleData(seurat_citeseq, features = VariableFeatures(seurat_citeseq))
```

### Add HTO assay

First, subset the HTO data to barcodes that are now present in the Seurat object.
Furthermore, subset the features only to HTO tags.
Lastly, transpose the data so that HTO tags are rows and barcodes are columns.

```{r}
hto_data_common <- t(hto_data[colnames(seurat_citeseq), 1:12])
hto_data_common[, 1:4]
```

Use the function `CreateAssayObject()` to add the HTO data made of the common barcodes as a new assay the Seurat object created earlier.
Display the updated Seurat object.

**Hint:**

- Add the HTO assay under the name 'HTO'.

```{r}
seurat_citeseq[["HTO"]] <- CreateAssayObject(counts = hto_data_common)
seurat_citeseq
```

### Normalise the HTO assay

Use `NormalizeData()` to apply the CLR (centered log ratio) transformation to the HTO assay.

**Hint:**

- Set the default assay to 'HTO' prior to running `NormalizeData()`.
- Set the argument `margin=1` to normalise each HTO tag (rather that each sample).

```{r}
DefaultAssay(hto12_object) <- "HTO"
hto12_object <- NormalizeData(hto12_object, assay = "HTO", normalization.method = "CLR" , margin=1)
```

**Why is the CLR transformation prefered for HTO data?**

> Answer:
> HTO data is binary: all or nothing.
> The CLR transformation pulls out this signal.
