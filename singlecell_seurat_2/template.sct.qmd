---
title: "Template: Single-cell analysis using Seurat, part 2"
author: "Kevin Rue-Albrecht"
date: "2024-03-12"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false
library(Seurat)
library(tidyverse)
library(gprofiler2)
```

## Goal

Compare clustering results following basic normalisation and sctransform normalisation.

## Exercise

### Import data

Read the file `seurat_after_qc.rds` in the shared resources.

```{r}
seurat_after_qc <- readRDS( )
```

### Default assay

Check the name of the default assay (best practice before using Seurat functions).

```{r}

```

### SCTransfrom

Apply SCTransfrom.

**Hint:**

- Refer to the SCTransform vignette available at <https://satijalab.org/seurat/articles/sctransform_vignette.html>.
- Consider confounding variables to specify in the argument `vars.to.regress=`.
- Consider the number of variable features to specify in the argument `variable.features.n=`.

```{r}
seurat_after_qc <- SCTransform(
  
  
  
)
```

**Note:** The `SCTransform()` function effectively replaces the workflow performed by the functions `NormalizeData()`, `ScaleData` and `FindVariableFeatures()`.

**Where is the new normalisation stored?**

> Answer:
> 

**Note:** The 'SCT' assay is automatically set as the default assay immediately after SCTransform is run.

### Explore SCTransform results

Explore the `seurat_after_qc` object assays and metadata (best practice to get to know the object).

```{r}

```

```{r}

```


**Can you see any change in the assays?**

> Answer:
> 

**Can you see any new column(s) in the metadata?**

> Answer:
> 

### Visualise SCTransform results

Use the function `VlnPlot()` to compare the total counts in the RNA and SCT assays, and to compare the number of features detected in each assay.

**Hint:** Force the function to apply the same Y-axis range to all panels in each plot, to make comparisons easier.

```{r}
# counts
VlnPlot(
  
  
  
)
```

```{r}
# features
VlnPlot(
  
  
  
)
```

**Note:**

- The original library size and number of features detected per cell are already present in the Seurat object.
- `SCTransform` adds two columns of cell metadata for library and number of features detected after SCT normalisation.

## Bonus

### Visualise a feature in the SCT assay

For the feature of your choice (e.g., `LYZ`), using the SCT assay:

- Visualise the distribution of count data.
- Visualise the distribution of log-counts in the data slot.
- Visualise the distribution of scaled log-counts.

**Hint:** For each plot, pass the output of `FetchData()` to `ggplot()`, store each plot, and combine them into a single plot using `cowplot::plot_grid()`.

```{r}
#| fig.height = 10
DefaultAssay(seurat_after_qc) <- 
ggplot_lyz_raw <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "counts"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
ggplot_lyz_normalised <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "data"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
ggplot_lyz_scaled <- ggplot(FetchData(seurat_after_qc, vars = "LYZ", slot = "scale.data"), aes(LYZ)) +
    geom_histogram(fill = "grey", color = "black", bins = 100) +
    coord_cartesian(ylim = c(0, 500)) +
    cowplot::theme_cowplot()
cowplot::plot_grid(ggplot_lyz_raw, ggplot_lyz_normalised,ggplot_lyz_scaled, ncol = 1)
```

## Exercise

### Variable features

Use the function `VariableFeatures()` to display the first 10 variable genes in the SCT assay and compare to first 10 genes in the RNA assay.

**Hint:**
Look at the help page of the function to find the argument that specified which assay to access.

```{r}
VariableFeatures(seurat_after_qc,  )[1:10]
VariableFeatures(seurat_after_qc,  )[1:10]
```

**How many genes overlap?**

```{r}
length(intersect(
  VariableFeatures(seurat_after_qc,  )[1:10],
  VariableFeatures(seurat_after_qc,  )[1:10]
))
```

> Answer
> 

### Dimensionality reduction on SCT transformed data

Run a principal component analysis and UMAP on the Seurat object.

**Best practice (Seurat):** Check the Default assay (again!).

```{r}
DefaultAssay(seurat_after_qc)
```

**Hint:**

- Consider setting the argument `reduction.name=` to something other than 'pca', to preserve the PCA results based on the 'RNA' assay.
- It doesn't hurt to set the default again before important steps, even if the default assay already is the desired one, as you might sometimes run code chunks out of order.
  
```{r}
DefaultAssay(seurat_after_qc) <- 
seurat_after_qc <- RunPCA( )
```

Check the name of the dimensionality reduction results present in the Seurat object now (best practice to get to know the object).

```{r}
Reductions(seurat_after_qc)
```

### PCA elbow plot

Use the function `ElbowPlot()` to visualise the amount of variance explained by the top principal components for the data produced by SCTransform.

**Hint:** Look at the help page of the function to find the argument that specifies the dimensionality reduction result to use.

**How many principal components would you use for downstream analyses?**

> Answer:
> 
  
```{r}
ElbowPlot( )
```

### UMAP

Run the function `RunUMAP()` on the Seurat object using the first 20 principal components computed from the SCT assay.

**Hint:**

- Look at the help page to find the argument that lets you specify the dimensionality reduction result that you want to use.

```{r}
seurat_after_qc <- RunUMAP(
  
  
  
  
)
```

Compare the UMAP results based on the SCT assay to those based on the RNA assay.

**Hint:**

- Use the `DimPlot()` function to produce each plot.
- Save each plot as a ggplot object.
- Combine the plots into a single plot using the `patchwork` package or the function `cowplot::plot_grid()`.

```{r, fig.width=10}
plot1 <- DimPlot(seurat_after_qc,  ) + ggtitle("RNA UMAP")
plot2 <- DimPlot(seurat_after_qc,  ) + ggtitle("SCT UMAP")

```

### Clustering

First, compute the graph of nearest neighbours using the function `FindNeighbors()`.

**Hint:**

Look at the help page to find the argument that lets you specify:

- The assay to use.
- The dimensionality reduction result to use.
- Which principal components to use.
  
```{r}
seurat_after_qc <- FindNeighbors(
  object = seurat_after_qc,
  
  
  
)
```

Next, compute the cluster label for each cell.

**Hint:**

Look at the help page to find the argument that lets you specify:

- The resolution of the clustering (higher value = more clusters).
  Set it to 0.5 (just so that we have the same results).
- The name of the graph to use.
  Set it 'SCT_snn'.

**What is the default resolution set by the function if you don't specify it? Do you expect more or fewer cluster with a resolution of 0.5?**

> Answer:
> The default resolution is 0.8.
> A resolution of 0.5 is smaller, so we expect fewer clusters.

Check the names of the existing graphs (if any).

```{r}
Graphs(seurat_after_qc)
```

```{r}
seurat_after_qc <- FindClusters(
  object = seurat_after_qc,
  
  
)
```

## Bonus

### Compare cluster labels using SCT and RNA assays

Use the `table()` function to cross-tabulate the number of cells assigned to each cluster in the workflows using SCT and RNA assays.

**Hint:**

- Look at the column names in the cell metadata to find the name of the columns that contain the cluster labels that you want to compare.
- Give the two vectors to cluster labels to the `table()` function to cross-tabulate them.
- Naming the arguments given to the `table()` function make the output easier to intepret.

```{r}
colnames(seurat_after_qc[[]])
```

```{r}
table(
  RNA = ,
  SCT = 
)
```

## Exercise

### Visualise cluster labels on the UMAP layout

Color cells by their cluster label in a scatter plot of UMAP coordinates, both based on the SCT assay.
Compare this with the same plot based on the RNA assay.

**Hint:** Use the `DimPlot()` function to generate the two plots and combine them as you did earlier.

```{r}
plot1 <- DimPlot(
  object = seurat_after_qc,
  
  ) +
  ggtitle("RNA UMAP")

plot2 <- DimPlot(
  object = seurat_after_qc,
  
  ) +
  ggtitle("SCT UMAP")


```

**How would you describe the agreement between the UMAP layout and clustering for SCT vs RNA Assay results?**

> Answer:
> Not too bad.
> One additional cluster after SCT.
> Cells assigned to the same cluster seem to group more cleanly in the SCT workflow.

### Visualise gene expression on the UMAP layout

Colors cells by the expression level of common cell type markers in PBMC data sets.

**Hint:**

- CD14^+^ monocytes: LYZ, CD14
- CD16 monocytes: FCGR3A, MS4A7
- CD4^+^ T cells:  CD4, IL76
- CD8^+^ T cells: CD8A, CD3D
- NK cells: GNLY, GZMB,NKG7
- B cells:  MS4A1 , CD79A
- DC: CST3, FCER1A
- Platelets: PPBP

```{r, fig.width=10, fig.height=8}
FeaturePlot(
  object = seurat_after_qc,
  
  
)
FeaturePlot(
  object = seurat_after_qc,
  
  
)
```

**Would you say that SCT improves the appearance of the plots?**

> Answer:
> 

## Bonus

### Cluster markers (SCT)

Use the function `FindAllMarkers()` to compute markers for the clusters obtained using the SCT assay.

**Hint:**

- Set the identities that should be used by the `FindAllMarkers()` method.
- Look at the help page for the various arguments relevant to you.
- Force the function to use the 'SCT' assay.
- Force the function to return only positive markers.
- Force the function to exclude any gene detected in fewer than 25% of each target cluster.
- Force the function to exclude genes with log fold-change values lower than 0.25.

```{r}
Idents(seurat_after_qc) <- 
markers_all_sct <- FindAllMarkers(
    seurat_after_qc,
    
    
    
    
)
```

### Cluster markers (RNA)

Do the same to compute markers for the clusters obtained using the RNA assay. 

```{r}
Idents(seurat_after_qc) <- 
markers_all <- FindAllMarkers(
    seurat_after_qc,
    
    
    
    
)
```

### Over-representation analysis

Use gprofile2 to perform pathway over-representation analysis (ORA) on cluster markers (i.e, genes differentially expressed between clusters) and visualise the results.

**Hint:**

- Filter the cluster markers on adjusted p-value and log fold-change.
- Make a named list of cluster markers (i.e., each item in the list is a vector of gene symbols, each named after the cluster those markers correspond to).
  The `split()` function is a good tool to do this in a single step.
- Give that list of cluster markers (all markers for all clusters at once) to the `gprofiler::gost()` function.
- Set the default assay to 'SCT' and extract the rownames to use as custom background.

```{r}
markers_filtered <- markers_all_sct %>% 
    dplyr::group_by(cluster) %>% 
    filter(p_val_adj < 0.05) %>% 
    filter(avg_log2FC > 0.585) %>%
    dplyr::select(cluster,gene)
markers_list <- split(
  x = markers_filtered$gene,
  f = markers_filtered$cluster
)
DefaultAssay(seurat_after_qc) <- "SCT"
markers_background <- rownames(seurat_after_qc)
gost_sct <- gprofiler2::gost(query = markers_list, custom_bg = markers_background)
```

For instance, subset the results to the biological pathways enriched for markers of cluster '0'.

```{r}
head(subset(gost_sct$result, query == "0" & source == "GO:BP"))
```
