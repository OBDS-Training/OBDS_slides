## What <i class="fab fa-r-project"></i> is

<i class="fab fa-r-project"></i>? is a freely available language and environment for statistical computing and graphics which provides a wide variety of statistical and graphical techniques: mathematical modelling, statistical tests, time series analysis, classification, clustering, etc.

```{r}
#| fig-align: center
knitr::include_graphics("img/r-console.png")
```

## The inception of <i class="fab fa-r-project"></i>

- Developed in 1995 by [Robert Gentleman](https://en.wikipedia.org/wiki/Robert_Gentleman_(statistician)) & [Ross Ihaka](https://en.wikipedia.org/wiki/Ross_Ihaka).
- Based on *S* ([Wikipedia](https://en.wikipedia.org/wiki/S_(programming_language))).
- Focused on user friendly data analysis, stats and visualization.

## Why <i class="fab fa-r-project"></i> is used

- 100% free.
- Huge community of programmers who constantly develop and distribute new functionality.
- Incredibly versatile. 
- <i class="fab fa-r-project"></i> scripts are transparent, shareable, and reproducible.

## Base <i class="fab fa-r-project"></i>

- Base <i class="fab fa-r-project"></i> is made up of a small set of packagess maintained by [R Core](https://www.r-project.org/contributors.html).
- <i class="fab fa-r-project"></i> itself does not have a graphical user interface (GUI).
- RStudio is an integrated development environments (IDE) developed by [Posit](https://posit.co/) (formerly known as RStudio).
- <i class="fab fa-r-project"></i> and RStudio products have been around for several years.
  However, they are constantly being updated with new features and bug-fixes;
  take note of the version of <i class="fab fa-r-project"></i> and <i class="fab fa-r-project"></i> packages that you are using.

## <i class="fab fa-r-project"></i> packages

- <i class="fab fa-r-project"></i> packages are add-ons that encapsulate collections of functions written by members of the broader (you and me).
- They add new functionality.
- They can include code, data, and documentation.

<i class="fab fa-r-project"></i> packages can be downloaded and installed from various repositories:

- CRAN (<https://cran.r-project.org/>) -- General purpose
- Bioconductor (<https://www.bioconductor.org/>) -- Bioinformatics
- GitHub (<https://github.com/>) -- Not only <i class="fab fa-r-project"></i>

## Installing packages

- On the CCB server, packages are managed by the administrators.
  Email <genmail@molbiol.ox.ac.uk> and ask for the package to be installed.
- In a regular <i class="fab fa-r-project"></i> session, use the function `install.packages()`, e.g.

```{r}
#| eval: false
#| echo: true
install.packages("tidyverse")
```

- You can also install <i class="fab fa-r-project"></i> packages in a [Conda](https://docs.conda.io/en/latest/) environment.

<br/>

### Using packages

Installed packages must be attached to the <i class="fab fa-r-project"></i> session to access their functionality.

- Use the function `library()` to attach a package to the current <i class="fab fa-r-project"></i> session, e.g.

```{r}
#| eval: false
#| echo: true
library(tidyverse)
```

## RStudio

RStudio is an integrated development environment for <i class="fab fa-r-project"></i>.
It is available in two formats: [RStudio Desktop](https://posit.co/download/rstudio-desktop/) is a regular desktop application while [RStudio Server](https://posit.co/download/rstudio-server/) runs on a remote server and allows accessing RStudio using a web browser.

```{r}
#| fig-align: center
#| out-width: 700px
#| out-height: 500px
knitr::include_graphics("img/rstudio.png")
```

## RStudio main panels

The RStudio application is usually divided in four quadrants:

1. Source editor
2. <i class="fab fa-r-project"></i> Console
3. Environment / History / Connections / ...
4. Files / Plots / Packages / Help / ...

## The RStudio Source Editor

- The source editor allow you to open and edit files (not only <i class="fab fa-r-project"></i> scripts).
- Individual lines of code can be evaluated in the <i class="fab fa-r-project"></i> console using the `Run` button or the keys `Control` + `Enter` (Windows) / `Command` + `Enter` (macOS).
  - The cursor can be anywhere in the line of code to evaluate.
- Multiple lines of code can be evaluated in the <i class="fab fa-r-project"></i> console by selecting them and using the same actions as above.
  - The *entire* line must selected to evaluate it all.
  - Selecting part of a line evaluates only the selected part.
- An entire <i class="fab fa-r-project"></i> script can be evaluated using the `Source` button, or `Control` + `Shift` + `Enter` (Windows) / `Command` + `Shift` + `Enter` (macOS).

## Commenting your code

<br/>

```{r}
#| eval: false
#| echo: true
# read data from input file
input_data <- read.csv("input_data.csv")

print(input_data) # display input data
```

<br/>

- The hash symbol `#` can be used to add comments in your code.
- Anything on the line after the `#` will *not* be evaluated.
  - Lines that start with `#` are entirely ignored.
- On macOS, `#` is obtained using `Alt` + `3`.
- You can select multiple lines of code and press `Control` + `Shift` + `C` (Windows) / `Command` + `Shift` + `C` (macOS) to comment them all in one action.

## The RStudio <i class="fab fa-r-project"></i> console

- In the <i class="fab fa-r-project"></i> console, the prompt `>` indicates that the console is awaiting the next command.
- You can type code directly in the <i class="fab fa-r-project"></i> console and press `Enter` to evaluate it in the current environment.
- If incomplete code was submitted, the prompt `+` indicates that the console is awaiting more code to complete the current command.
- Press `Esc` to erase the code that you are currently typing in the <i class="fab fa-r-project"></i> console (the cursor must be in the <i class="fab fa-r-project"></i> console).

## The RStudio Environment panel

A number of additional panes appear in this panel, depending on your context.

The most important panes are:

- `Environment` details the objects that exist in your current <i class="fab fa-r-project"></i> session.
  - You can clear your environment using the brush icon.
- `History` lists the lines of code that were executed in this environment.

Other context-dependent panes include:

- `Git` facilitates work in <i class="fab fa-git"></i> repositories.
- `Tutorial` facilitates access to tutorials.
  - The `r BiocStyle::CRANpkg("learnr")` package must be installed for this pane to work.

The `Connections` pane is a core pane gives access to a variety of other tools for working with databases in <i class="fab fa-r-project"></i>.

## The RStudio Files/Plots/Packages/Help/Viewer panel

Some additional panes appear in this panel, depending on your context.

- The `Files` pane can be used to navigates the filesystem.
- The `Plots` pane displays plots produced by evaluated code.
- The `Packages` pane details packages installed in your <i class="fab fa-r-project"></i> library.
- The `Help` pane displays help pages.
- The `Viewer` pane displays more complex documents (e.g., vignettes).

Other context-dependent panes include:

- The `Presentation` pane displays presentations produced like this one.

## Saving scripts in RStudio

- New scripts are initially opened in tabs called `Untitled` in the source editor.
- Scripts can be saved using `Control` + `S` (Windows) / `Command` + `S` (macOS).

## Opening a session on RStudio Server

- Navigate to <https://cbrglogin3.molbiol.ox.ac.uk/rstudio/>.
- Log in using your username and password.

```{r}
#| fig-align: center
#| out-width: 850px
#| out-height: 500px
knitr::include_graphics("img/rstudio-cbrg.png")
```
