## DESeq2

Citation of DESeq2 `r Citep(bib, "deseq2_package")`.

## Exercise

### Import gene data and metadata

- Load the `tidyverse` package,
  and use the function `read_tsv()`
  to import count data from the file `allsamples_counts.tsv.gz`
  into a tibble called `featurecounts_table`.
  Display a preview of `featurecounts_table` using `glimpse()`.
- Extract gene metadata from the tibble `featurecounts_table` into a new tibble called `gene_info`.
  Display a preview of `gene_info` using `glimpse()`.
- Similarly, extract the read counts per sample from `featurecounts_table`
  into a numeric matrix called `counts_table`.
  Display the first few rows of `counts_table` using `head()`.
- Display the dimensions of the matrix `counts_table`.
- What does the function `storage.mode()` tell you about `counts_table`?

## Exercise

### Import sample metadata

- Import sample metadata from the file `PRJEB18572_sample_info.tsv`
  into a tibble called `sample_info`
  using the tidyverse function `read_tsv()`.
  Display the object `sample_info`.
- What is the class of the column called `cell_type`?
- Convert the column `cell_type` to a factor.
- What is the default order of the levels of that factor?
- One more time, convert the column `cell_type` to a factor,
  this time setting the levels of that factor to be `CD8` first, then `CD4`.
  Demonstrate that it worked.

::: {style="text-align: center;"}
**How does the order of the levels impact the differential expression analysis?**
:::

- What other columns might we want to include in the experimental design of our differential expression analysis?
  Convert those to factors too.
  Display the full tibble `sample_info` again.

## Exercise

### Sanity check and preprocess data

- Check whether sample names in the count matrix (column names) and sample meta (column `sample_id`) match.
- If not, display the two sets of sample names.
  (Hint: you display them individually, or as two columns in a single tibble, for easier side-by-side comparison).

::: {style="text-align: center;"}
**What makes the two sets of sample names different from each other?**
:::

- Remove `.bam` from the column names of the matrix to match the `sample_id` column of the sample metadata.
- Check (again) whether sample names in the count matrix (column names) and sample meta (column `sample_id`) match.

## Exercise

### Construct a DESeqDataSet object

- Load the package `DESeq2`
  and use the function `DESeqDataSetFromMatrix()`
  to construct a `DESeqDataSet` called `dds`
  using the count matrix `counts_table`
  and the tibble `sample_info`.
  Define an experimental design that includes only `cell_type` for now.

::: {style="text-align: center;"}
**The function `DESeqDataSetFromMatrix()` is expected to printed the message "converting counts to integer mode". Why?**
:::

- Rewrite the code above, adding a line using the function `storage.mode()` to avoid the message.
- Display the `dds` object.

## Exercise

### Explore a DESeqDataSet object

- Use the function `class()` to demonstrate that the object `dds` is a `DESeqDataSet`.
- Use the function `is()` to demonstrate that `dds` is also a `SummarizedExperiment`.
- Given that `dds` is a `SummarizedExperiment`, what do the following methods tell you about `dds`?

:::: {.columns}

::: {.column width="33%"}
`assayNames()`

`assays()`
:::

::: {.column width="33%"}
`assay()`

`colData()`
:::

::: {.column width="33%"}
`rowData()`

`metadata()`
:::

::::

- Furthermore, as a `DESeqDataSet`, what do the following methods tell you about `dds`?

:::: {.columns}

::: {.column width="50%"}
`counts()`

`design()`
:::

::: {.column width="50%"}
`sizeFactors()`

`dispersions()`
:::

::::

## References

```{r}
#| results: asis
PrintBibliography(bib)
```
