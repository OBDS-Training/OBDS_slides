---
title: "Solution: Introduction to the Linux command line, part 2"
format: html
engine: knitr
execute: 
  eval: false
  echo: false
---

# Day 2 Exercises

## Talk 1 Exercise 1 – Linux processes & system resources {#sec-Talk1Exercise1}

1. Start a new process in the foreground using the `sleep`.

```{bash}
sleep 300
```

2. Pause the process and send it to the background.

```{bash}
# Control + z then
bg
```

3. Check the status of running processes.

```{bash}
ps
jobs
```

4. Start a new sleep process in the background.

```{bash}
sleep 350 &
```

5. Kill the first process.

```{bash}
ps # Or 
jobs -l # -l To additionally display PID

kill <PID>
```

## Talk 1 Exercise 1 – Linux processes & system resources 

6. Bring the second process to the foreground and terminate it.

```{bash}
fg   # Then Control + c
```

7. Start 3 sleep (background) processes and kill them all by name using a single command.

```{bash}
sleep 300 & sleep 300 & sleep 300 & # Or just input separate lines
killall sleep
```

8. Look for all the processes for your username using `htop`.

```{bash}
htop # Then type 'u', select username then press Return 
# To go back to original view, type 'u', select 'All users' then press Return
# F10 to quit htop
```

9. Sort the processes output by memory usage.

```{bash}
htop # Then click on column header
```

10. Find the total memory usage, total tasks and running tasks on the server.

```{bash}
# Information on top section (dynamic because info is real-time, no single answer)
htop 
```

11. Check the total disk usage in your home directory.

```{bash}
cd ~ 
du -sh .
```

## Talk 2 Exercise 1 – Shell configuration {#sec-Talk2Exercise1}

1. Locate your **.bash_aliases** in your home directory.

```{bash}
cd ~; ls -a
```

2. If file does not exist, create **.bash_aliases** in your home directory. 

```{bash}
touch ~/.bash_aliases
```

3. Use a terminal text editor to open your **.bash_aliases** and add the **alias la='ls -alhF'**.

```{bash}
nano .bash_aliases     
```

4. Add aliases to **.bash_aliases** for the resources directory and your course working directory.

```{bash}
alias resdir='cd <resources dir>'
alias cwdir='cd <course working dir>'
```

5. To apply the changes, open a new terminal. Check that your aliases work.

<!-- 10. To apply the changes, open a new terminal (or type `source .bash_aliases` on the current terminal). Check that your aliases work. -->

## Talk 2 Exercise 2 – Modules {#sec-Talk2Exercise2}

1. List the available modules on the server.

```{bash}
module avail
```

2. Search module list for available fastqc versions.

```{bash}
module search fastqc
```

3. Load the fastqc module and use `which` to confirm it has worked. 
Look at the system path, then unload the module and check it again.

```{bash}
which fastqc
module add fastqc/0.11.9 
which fastqc

echo $PATH
module unload fastqc
echo $PATH
```

<!--
3. Try using the module system to load different versions of programs you are familiar with.
Look at how system path changes.

```{bash}
module add cellranger/2.1.1
module list
module unload cellranger
module list
module add cellranger/7.1.0
```
-->

## Talk 3 Exercise 1 – Working directory {#sec-Talk3Exercise1}

**Set up a working directory for RNAseq data analysis**

1. Create a new directory called **rnaseq** within **1_linux** in your course working directory. 

```{bash}
cd <course working dir>/1_linux/
mkdir rnaseq
```

2. Change into your **rnaseq/**. Create subdirectories called **1_fastq** and **2_genome**.

```{bash}
cd rnaseq/
mkdir 1_fastq 2_genome
```

3. Create symbolic links to a pair of fastq files in the rnaseq resources directory, in **1_fastq/**.

```{bash}
cd 1_fastq/
ls <resources dir>/1_linux/rnaseq/
ln -s <resources dir>/1_linux/rnaseq/ERR1755082_1.fastq.gz ERR1755082_1.fastq.gz
ln -s <resources dir>/1_linux/rnaseq/ERR1755082_2.fastq.gz ERR1755082_2.fastq.gz
```

## Talk 3 Exercise 1 – Working directory 

4. Copy the file **md5sum.txt** from rnaseq resources directory to **1_fastq**.

```{bash}
cp <resources dir>/1_linux/rnaseq/md5sum.txt md5sum.txt
```

5. Check that the checksums for your fastq files (downloaded from ENA) are correct.

```{bash}
md5sum -c --ignore-missing md5sum.txt
``` 

## Talk 3 Exercise 1 – Working directory

6. Download the fasta file for the mouse genome (GRCm38, release 102) from Ensembl to **2_genome/** and check it downloaded correctly using the CHECKSUMS file that can also be downloaded from the database.

```{bash}
# Go to Ensembl home, Downloads tab, FTP Download section then the table links 
# to most current release but you can work your way up to get to older releases
# This way is good because directory structure is similar across releases and 
# you should be able to find the file type you want in older releases

# Alternatively, you can change the text of the links below based on the release 
# you want (e.g. to download release 110, change 102 to 110 in the links) but 
# this approach is subject to typos and also you are not sure whether the link
# really (or still) exists or not

cd ../2_genome/
# Download Mus_musculus.GRCm38.dna.primary_assembly.fa.gz
wget \
https://ftp.ensembl.org/pub/release-102/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz &
wget https://ftp.ensembl.org/pub/release-102/fasta/mus_musculus/dna/CHECKSUMS &
cat CHECKSUMS | grep 'Mus_musculus.GRCm38.dna.primary_assembly.fa.gz'
sum Mus_musculus.GRCm38.dna.primary_assembly.fa.gz
# The checksums value in CHECKSUMS file (downloaded from public database) for 
# 'Mus_musculus.GRCm38.dna.primary_assembly.fa.gz' should match the generated 
# checksums value (generated using sum command) for the file you downloaded
```

## Talk 3 Exercise 1 – Working directory

7. Download the annotation GTF file for the mouse (release 102) genome from Ensembl to **2_genome/** and check it downloaded correctly using the CHECKSUMS file that can also be downloaded from the database.

```{bash}
wget \
https://ftp.ensembl.org/pub/release-102/gtf/mus_musculus/Mus_musculus.GRCm38.102.gtf.gz &
wget https://ftp.ensembl.org/pub/release-102/gtf/mus_musculus/CHECKSUMS > CHECKSUMS_GTF &
ls  # Because there is an existing CHECKSUMS for the genome, it downloaded GTF CHECKSUMS as CHECKSUMS.1
cat CHECKSUMS.1 | grep 'Mus_musculus.GRCm38.102.gtf.gz'
sum Mus_musculus.GRCm38.102.gtf.gz
```

8. Create a **readme.txt** file in the **2_genome/** detailing how you obtained the public data files.

```{bash}
nano readme.txt  # Or
touch readme.txt
```

9. Create a third directory called **3_analysis** in your **rnaseq** directory. Change into the new directory and create a subdirectory called **1_fastqc**. View rnaseq directory structure using `tree`.

```{bash}
cd ..
mkdir 3_analysis
cd 3_analysis
mkdir 1_fastqc
cd ..
tree
```

## Talk 3 Exercise 1 – Working directory

10. Create an analysis lab-book called **rnaseq_commands.sh** in **3_analysis/**.

```{bash}
cd 3_analysis
touch rnaseq_commands.sh
```
