# Talk 4: Linux shell configuration

## Overview

- Outline
  + The .bashrc file
  + Aliases
  + The .inputrc file
  + Environment variables
  + The system path, $PATH
  + SSH and public-private keys
  + Environment modules

## Shell configuration

- The file ~/.bashrc is a shell script that Bash runs whenever it is started interactively
  + A hidden file as its name starts with '.'; display with `ls -a`
  - Often edited to include commands that users wish to execute every time they log in, without the need to explicitly type them every time
 
- New accounts on the CCB cluster are created with a initial copy of ~/.bashrc file

- Used to configure the shell environment
  + Set aliases (shortcuts)
  + Set environment variables
  + Load environment modules
 
## Aliases

- Shortcut for a command or series of commands
- Reduce keystrokes and improve efficiency
- While `alias` command can be used to define shortcuts interactively in the Bash session, aliases are most commonly defined in the ~/.bashrc file, to make them available as soon as users open a new shell
- Be mindful of overriding existing command name as aliases take precedence over commands of the same name

```
$ alias la='ls -alhF'       # Informative listing of files
$ alias rm='rm -i'          # Force an interactive prompt before every removal
$ alias wd='cd </path/to/working_dir/> && pwd && ls'
```

## Environment variables

- A variable is a named place in a computer’s memory that stores a particular piece of information (e.g. number, string)
- Environment variables are defined and available in the shell’s environment
- Can be accessed by any program run in the shell
- Can be accessed using '\$' followed by variable name e.g. $USER
- Can be user defined and modified
  + Once logged into the CCB cluster, a number of environment variables are set in the Bash session

```
$ echo $HOME        # Set for each user to their own home directory
$ ls $HOME          # Use in commands
$ echo $USER        # Set for each user to their own username
$ mkdir $USER
$ printenv          # Print currently defined environment variables
$ printenv USER     # Print $USER
```

- Above are among the most commonly used variables but user can define any number of custom variable names using `export`
- Some programs might expect users to define additional environment variables

```
export TMP="$HOME"        # Not set by default, preferably define in ~/.bashrc
```

## Environment variables - System path ($PATH)

- One of the most important environment variable
- Stored as a colon-separated (: symbol) character string that represents the list of directories that are searched – in the given order – to find executable files that are invoked by users and their scripts
- If the wanted program is not in the list of directories, it will not run
- Mpdify to add directories or remove directories (e.g. when a command is defined in multiple directories)
- Alternatively, you can provide the full path to the program you wish to run

```
$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/l/ltamon/edirect:/home/l/ltamon/.local/bin:/home/l/ltamon/bin
```

- Whenever possible, we recommend using `module` to add and remove programs (i.e. modules) from the $PATH

## Environment modules

- Provide a central install of software available to multiple users on the same computer system 
- Dynamic modification of a user’s shell environment via modulefiles
  + Modulefiles are created by the system administrator to instruct `module` to alter or set shell environment variables such as $PATH
  + New modules can be requested from system administrators (help@imm.ox.ac.uk)[help@imm.ox.ac.uk]

```
$ module avail                # List modules currently available
$ module avail python         # Search for specific pattern of module names or use
$ module search python.       # 
$ module list                 # List modules currently loaded
$ module <add | load>         # Add/load modules 
$ module load fastqc/0.11.9 bowtie2/2.4.2 # Load multiple modules
$ module unload <module name> # Unload 
$ module purge                # Unload all loaded modules 
```

## Remote Connection to a Linux Server

- We log into the CCB cluster using `ssh`
- SSH (secure shell) is an encrypted network protocol for establishing a secure connection to a remote server
- Simply put, the protocol uses a username and password to authenticate a user on the remote system
```
$ ssh <username>@<remote>
$ ssh <username>@login1.molbiol.ox.ac.uk 
$ ssh <username>@login2.molbiol.ox.ac.uk 
```
- Can create a shortcut on your local machine to minimise typing
- Can also use a public-private key pair (SSH key) for additional layer of security

## Setting up a public-private key pair

- An SSH key consists of two parts:
  + A private file (private key) on your local home directory (id_rsa)
  + A public file (public key) which is uploaded to the remote server you are connecting to (id_rsa.pub)
- These two files enable your personal computer and the cluster to identify each other

```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 300px
## Source: CCB Doks
knitr::include_graphics("img/ssh-key-pair.png")
```

## Setting up a public-private key pair

- On your local machine, SSH keys and configuration files are stored in a hidden directory within your home directory called .ssh
```
$ cd ~/.ssh                  # Create if it doesn't exist
$ ssh-keygen -t rsa -b 2048  # Generate keys
```
   + -t = To specify the type of SSH key pair
   + -b = To specify the number of bits in the key; a minimum of 2048 is previously recommended, larger values generally give additional strength to the key

- You will be prompted for: 
  + A file name (leave blank - id_rsa by default)
  + A password / passphrase (always set a password for maximum security)

- Please ensure that the private key file has only read and write permissions for user and no permissions for group or other; file must be secure for the authentication to work

## Adding the public key to a remote server

- The public key – generated and saved as a file on the local machine – needs to be copied to your account on the cluster, so that the CCB cluster can prove its identity to the client
```
$ ssh-copy-id -i ~/.ssh/id_rsa <username>@<remote>
$ ssh-copy-id -i ~/.ssh/id_rsa <username>@login1.molbiol.ox.ac.uk
```
- If the public key indeed does not exist on your CCB cluster account yet, you will be prompted for your password. Type it, and press the Return key

- This adds the public key to the file ~/.ssh/authorized_keys on your account on the cluster

## Configuring the SSH client

- We can create a file to store ssh connection details and use a shortcut (host nickname) to access them
- These can be done by creating a file called config in your local ~/.ssh directory
```
$ cd ~/.ssh
$ nano config
```

```
Host * 
    IdentityFile ~/.ssh/id_rsa
```
  + The keyword 'Host' creates a new set of parameters
  + The pattern * matches all hostnames, making those parameters global defaults unless overwritten in subsequent declaration
  + IdentityFile specifies the path to the private SSH key file that you created earlier on your local machine

- Explicitly declare host name if using different SSH key pairs to connect to different SSH servers:
```
Host jade1                      
    Hostname login1.molbiol.ox.ac.uk
    user <username>
    IdentityFile ~/.ssh/id_rsa
    
    # For macOS only, add these so there's no need to enter passphrase when starting remote connection
    AddKeysToAgent yes          # Whether keys should be automatically added to a running ssh-agent
    UseKeychain yes             # Whether passphrases are stored in the keychain (macOS app)
    
```
   
- A template config file is provided in /project/obds/shared/resources/1_linux/2_linux_config

## Exercise 1 - Shell configuration

## Exercise 2 - Working with modules

## Useful links

## References

```{r}
#| results: asis
PrintBibliography(bib)
```

# Bonus topics

## Advanced shell configuration

- .inputrc file
- .bash_profile 

<Need to figure out what's going on the cluster with .bashrc, .profile, .bash_profile>
<Explain here what's going on in the cluster>

## Advanced SSH client configuration

- https://obds-training.github.io/Help/docs/connect/ssh-configuration/client-advanced/
