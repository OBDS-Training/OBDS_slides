# Talk 2: Linux shell configuration

## Overview

- Shell configuration
- Aliases
- Environment variables e.g. the system path, $PATH
- Environment modules
- SSH and public-private keys for remote connection to a Linux server

## Shell configuration

- The file ~/.bashrc is a shell script that Bash runs whenever it is started interactively
  + A hidden file as its name starts with '.'; display with `ls -a`
  - Often edited to include commands that users wish to execute every time they log in, without the need to explicitly type them every time
 
- Typically, new accounts on Linux servers are created with an initial copy of ~/.bashrc file 

- Used to configure the shell environment
  + Set aliases
  + Set environment variables

  <!-- + Load environment modules (not recommended) -->

<br>

- Sometimes, instead of directly editing the ~/.bashrc file, another configuration file, **~/.bash_aliases**, can be created and used for user-defined configuration
  + This file is also typically loaded automatically by the Bash shell
  + In this course, we will be modifying this file (<span style="color:green;">**Show current ~/.bashrc**</span>)
  
 
## Aliases

- Shortcut for a command or series of commands created using `alias`
- Reduce keystrokes and improve efficiency

```
$ alias la='ls -alhF'       # Informative listing of files
$ alias rm='rm -i'          # Force an interactive prompt before every removal

$ alias wd='cd </path/to/working_directory/> && pwd && ls'
```

- While `alias` command can be used to define shortcuts interactively in the Bash session, aliases are most commonly defined in the ~/.bashrc file, to make them available as soon as users open a new shell
- Be mindful of overriding existing command name as aliases take precedence over commands of the same name

<br>

- Apply new changes (e.g. adding alias) to shell configuration file by:
  + Open new session
  + Sourcing file using `source` in current shell session

```
$ source ~/.bashrc
$ source ~/.bash_aliases
```
  

## Environment variables

- A variable is a named place in a computer’s memory that stores a particular piece of information (e.g. number, string)
- Environment variables are defined and available in the shell’s environment
- Can be accessed by any program run in the shell
- Can be accessed using '\$' followed by variable name e.g. $USER

## Environment variables

- A number of environment variables are often already available in the Bash session

```
$ echo $HOME            # Home directory
$ echo $USER            # Username
$ printenv USER         # Print $USER
```

<!-- $ ls $HOME              # Use in commands -->
<!-- $ echo $USER            # Set for each user to their own username -->
<!-- $ mkdir $USER -->
<!-- $ printenv              # Print currently defined environment variables -->

- Above are among the most commonly used variables but users can define any number of custom variable names using `export`

```
export TMP="/home/david/tmp/"      # Preferably define in ~/.bashrc
```

- Some programs might expect users to define additional environment variables

## Environment variables - System path ($PATH)

- One of the most important environment variable
- It contains a list of directories on the file system where bash should look to find executable commands/programs/software
- List is a colon-separated (:) character string that is searched – in the given order – to find the executable program

```
$ echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/l/ltamon/edirect:/home/l/ltamon/.local/bin:/home/l/ltamon/bin
```

- If the wanted program is not in the list of directories, it will not run
- Alternatively, you can provide the full path to the program you wish to run

<br>

- But you can also modify $PATH to add directories or remove directories (e.g. when a command is defined in multiple directories)
- Whenever possible, we recommend using `module` to add and remove programs (provided as modules) from the $PATH

## Environment modules

- Often, computer systems shared by multiple users provide a central install of software
using the module system
- Accessing software is then done by dynamic modification of a user’s shell environment via modulefiles
  + Modulefiles are created by the system administrator to instruct `module` how software will be loaded or configured e.g. adding or removing path of software to $PATH
  + New modules can be requested from system administrators

```
$ module avail                              # List modules currently available
$ module avail python                       # Search for specific pattern of 
                                              module names
$ module search python

$ module list                               # List modules currently loaded

$ module add                                # Add or load modules
$ module load
$ module load fastqc/0.11.9 bowtie2/2.4.2   # Load multiple modules
```

```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 700px
## Source: Liezel
knitr::include_graphics("img/module_add.png")
```

```
$ module unload <module name>               # Unload 
$ module purge                              # Unload all loaded modules 
```

<!--

## Remote connection to a Linux server

- We can log into a remote target host using `ssh`
- SSH (secure shell) is an encrypted network protocol for establishing a secure remote connection to a target host
- Simply put, the protocol uses a username and password to authenticate a user on the target host
  ```
  $ ssh <target username>@<target host>
  ```
  + If prompted for authenticity of host and whether to continue connecting, type 'yes' (usually appears when connecting the first time)
  + This then prompts for the password for the user account on target host 

## Remote connection to a Linux server *via* a jump host

- Sometimes, the connection has to be through a jump (bastion / proxy) host as an intermediary or gateway for extra security

```
$ ssh -J <jump username>@<jump host> <target username>@<target host> 

# OR

$ ssh -o ProxyJump=<jump username>@<jump host> <target username>@<target host>
```

<br>

- To connect to the OBDS server (obds), we do need to use University VPN and go through the WIMM jump host (bastion.imm.ox.ac.uk)

  ```
  $ ssh -o ProxyJump=<username>@bastion.imm.ox.ac.uk <target username>@obds
  ```
  + If prompted for authenticity of host and whether to continue connecting, type 'yes'
  + **This then prompts for 2 passwords**, 1 for the jump host and 1 for the target host, that should be entered every time you want to connect
  + <span style="color:red;">For people within the University, the username is your SSO for both hosts</span>

-->

# Talk 2 Exercise 1 (Shell configuration) and 2 (Working with modules)

<!-- @sec-Talk2Exercise1 -->


## Talk 2 Exercise 1 – Shell configuration {#sec-Talk2Exercise1}

1. Locate your **.bash_aliases** in your home directory.

```{bash, eval = FALSE}
cd ~; ls -a
```

2. If file does not exist, create **.bash_aliases** in your home directory. 

```{bash, eval = FALSE}
touch ~/.bash_aliases
```

3. Use a terminal text editor to open your **.bash_aliases** and add the **alias la='ls -alhF'**.

```{bash, eval = FALSE}
nano .bash_aliases     
```

4. Add aliases to **.bash_aliases** for the resources directory and your course working directory.

```{bash, eval = FALSE}
alias resdir='cd <resources dir>'
alias cwdir='cd <course working dir>'
```

5. To apply the changes, source the modified .bash_aliases file. Check that your aliases work.

```{bash, eval = FALSE}
source ~/.bash_aliases
la
```

## Talk 2 Exercise 2 – Modules {#sec-Talk2Exercise2}

1. List the available modules on the server.

```{bash, eval = FALSE}
module avail
```

2. Search module list for available fastqc versions.

```{bash, eval = FALSE}
module search fastqc
```

3. Load the fastqc module and use `which` to confirm it has worked. 
Look at the system path, then unload the module and check it again.

```{bash, eval = FALSE}
which fastqc
module add fastqc/0.11.9 
which fastqc

echo $PATH
module unload fastqc
echo $PATH
```

<!--
3. Try using the module system to load different versions of programs you are familiar with.
Look at how system path changes.

```{bash, eval = FALSE}
module add cellranger/2.1.1
module list
module unload cellranger
module list
module add cellranger/7.1.0
```
-->

## Remote connection to a Linux server

- Typing the `ssh` command and all its options works on the command line 
  + but could be tedious especially when using an intermediate host and needing to repeatedly connect
- To minimise typing when connecting to a remote target host, we can:
  + Use an **SSH public-private key pair (SSH key)** **(1)** to avoid repeatedly entering passwords, which are likely hard to remember for security purposes, and **(2)** to enhance security e.g. not prone to password-guessing attacks
  + Use an **SSH configuration file** to store SSH connection details to multiple target hosts and accessing them using host shortcuts or nicknames, instead of typing full `ssh` commands
  + <span style="color:red;">Note that these two are independent, you can do either or both! We will do both of course!</span>
  
## Setting up a public-private key pair

- An SSH key pair consists of two parts:
  + A **private** key (a file) on your local home directory 
  + A **public** key (a file), which is copied to the remote host you are connecting to 
- These two files enable your personal computer and the target host to identify each other

```{r}
#| fig-align: center
#| out-height: 350px
#| out-width: 400px
## Source: CCB Doks
knitr::include_graphics("img/ssh-key-pair.png")
```

<span style="color:green;">Do together</span>

## References

```{r}
#| results: asis
PrintBibliography(bib)
```
