## Bioconductor resources and help

```{r}
#| fig-align: center
#| out-height: 100px
#| out-width: 350px
## Source: https://www.bioconductor.org/about/logo/
knitr::include_graphics("img/bioconductor_logo_cmyk.jpeg")
```

- Main website: <https://www.bioconductor.org/>
- Support site: <https://support.bioconductor.org/>
- Courses & Conferences materials: <https://www.bioconductor.org/help/course-materials/>
- YouTube videos: <https://www.youtube.com/user/bioconductor>
- Slack workspace: <https://bioc-community.herokuapp.com/>
- Book: [Orchestrating Single-Cell Analysis with Bioconductor](https://bioconductor.org/books/release/OSCA/)

## The Bioconductor SummarizedExperiment

```{r}
#| fig-align: center
#| out-height: 450px
#| out-width: 600px
## Source: https://www.nature.com/articles/nmeth.3252
knitr::include_graphics("img/summarizedexperiment-fig2.jpeg")
```

**Source:** <https://www.nature.com/articles/nmeth.3252> (Figure 2)

## SingleCellExperiment extends SummarizedExperiment

:::: {.columns}

::: {.column width="50%"}
### SummarizedExperiment.

```{r}
#| fig-align: center
## Source: https://www.nature.com/articles/nmeth.3252
knitr::include_graphics("img/summarizedexperiment-fig2.jpeg")
```

**Source:** <https://www.nature.com/articles/nmeth.3252> (Figure 2)
:::

::: {.column width="50%"}
### SingleCellExperiment

```{r}
#| fig-align: center
## Source: https://github.com/Bioconductor/OrchestratingSingleCellAnalysis/tree/images/images
knitr::include_graphics("img/singlecellexperiment-osca.png")
```

**Source:** <https://bioconductor.org/books/3.17/OSCA.intro/the-singlecellexperiment-class.html>
:::
::::

## SingleCellExperiment

```{r}
#| fig-align: center
## Source: https://github.com/Bioconductor/OrchestratingSingleCellAnalysis/tree/images/images
knitr::include_graphics("img/singlecellexperiment-osca.png")
```

**Source:** <https://bioconductor.org/books/3.17/OSCA.intro/the-singlecellexperiment-class.html>

## A single-cell analysis workflow using Bioconductor

:::: {.columns}

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-height: 500px
## Source: https://github.com/Bioconductor/OrchestratingSingleCellAnalysis/tree/images/images
knitr::include_graphics("img/workflow-osca.png")
```
:::

::: {.column width="50%"}
**Source:** <https://bioconductor.org/books/3.17/OSCA.intro/analysis-overview.html>

<br/>

**Key points:**

- A shared data structure allows modular analysis.
- Individual packages provide
  + Data structures (`r BiocStyle::Biocpkg("SingleCellExperiment")`)
  + Method (`r BiocStyle::Biocpkg("scran")`, `r BiocStyle::Biocpkg("scater")`)
  + Annotation (`r BiocStyle::Biocpkg("org.Hs.eg.db")`)
  + Reporting (`r BiocStyle::CRANpkg("rmarkdown")`, `r BiocStyle::CRANpkg("shiny")`)

:::
::::

## Bioconductor and Seurat

:::: {.columns}

::: {.column width="50%"}
### Bioconductor (2001-)

```{r}
#| fig-align: center
#| fig-cap: Schematic representation of the Bioconductor SingleCellExperiment
## Source: TODO
knitr::include_graphics("img/singlecellexperiment-osca.png")
```

**Source:** <https://bioconductor.org/books/3.17/OSCA.intro/the-singlecellexperiment-class.html>
:::

::: {.column width="50%"}
### Seurat (2014-)

::: {.small-table}
|Slot         |Function                                                                        |
|:------------|:-------------------------------------------------------------------------------|
|assays       |A list of assays within this object                                             |
|meta.data    |Cell-level meta data                                                            |
|active.assay |Name of active, or default, assay                                               |
|active.ident |Identity classes for the current object                                         |
|graphs       |A list of nearest neighbor graphs                                               |
|reductions   |A list of DimReduc objects                                                      |
|project.name |User-defined project name (optional)                                            |
|tools        |Empty list. Tool developers can store any internal data from their methods here |
|misc         |Empty slot. User can store additional information here                          |
|version      |Seurat version used when creating the object                                    |
:::

<br/>
<br/>

**Source:** <https://github.com/satijalab/seurat/wiki/Seurat>
:::
::::

## Bioconductor and Scanpy

:::: {.columns}

::: {.column width="50%"}
### Bioconductor (2001-)

```{r}
#| fig-align: center
knitr::include_graphics("img/summarizedexperiment-fig2.jpeg")
```

**Source:** <https://www.nature.com/articles/nmeth.3252> (Figure 2)
:::

::: {.column width="50%"}
### Scanpy (2017-)

```{r}
#| fig-align: center
#| fig-cap: Schematic representation of the Scanpy AnnData
knitr::include_graphics("img/anndata.svg")
```

**Source:** [https://anndata.readthedocs.io](https://anndata.readthedocs.io/en/latest/anndata.AnnData.html)
:::
::::

## Bioconductor workflow - Overview

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis.png")
```

## Bioconductor workflow - Import

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-import.png")
```

## Import single-cell data using Bioconductor {.smaller}

The package `r BiocStyle::Biocpkg("DropletUtils")` provides several utilities for reading and preprocessing single-cell data.

### Import

- `DropletUtils::read10xCounts()` imports 10X Genomics data from the CellRanger output directories.
  It returns a `SingleCellExperiment` object.

### Utilities and quality control

- `DropletUtils::barcodeRanks()` computes barcode rank statistics and identify the knee and inflection points on the total count curve.
- `DropletUtils::emptyDrops()` is designed to distinguish between empty droplets and cells by testing each barcodeâ€™s expression profile for significant deviation from the ambient profile.
- `DropletUtils::swappedDrops()` removes the effects of barcode swapping.
  It takes a list of paths to individual samples and returns a list with an item called `cleaned`, itself a list of sparse matrices, after removing swapped molecules.

## Exercise

### Import scRNA-seq data and create a SingleCellExperiment object {.smaller}

- Import the filtered matrix into R; use `r BiocStyle::Biocpkg("DropletUtils")`.

::: {.callout-note}
Use the `samples=` argument of the `DropletUtils::read10xCounts()` function to give a convenient name to each sample.
Check the difference without using the `samples` argument.
:::

## Bioconductor workflow - Quality control and filtering

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-qc-filter.png")
```

## Computing metrics for quality control {.smaller}

The package `r BiocStyle::Biocpkg("scuttle")` provides several utilities focused on the preprocessing and quality control of single-cell gene expression data.

### Quality-control

- `scuttle::perCellQCMetrics()` and `scuttle::perFeatureQCMetrics()` compute a variety of quality control metrics for arbitrary sets of cells and features in the dataset (e.g., mitochondrial genes, individual samples), and returns them as columns of a `DataFrame`.

- `scuttle::addPerCellQC()` and `scuttle::addPerFeatureQC()` compute the same metrics, but adds them to the `SingleCellExperiment` object as `colData` and `rowData`, respectively.

### Visualisation

- `scater::plotScater()` and other functions `scater::plot...()` can help you visualise different aspects of the data set.

... but you can also use `r BiocStyle::CRANpkg("ggplot2")` to visualise information stored as `DataFrame` in the `colData()` and `rowData()` (Note: you will first need to convert from `DataFrame` to `data.frame` or `tibble`).

## Exercise

### Quality control

- Compute and visualise quality control metrics (library size, genes detected, mitochondrial fraction); use `r BiocStyle::Biocpkg("scuttle")` and/or `r BiocStyle::Biocpkg("scater")`.
- Visualise library size, genes detected and mitochondrial fraction as three violin plots;
  use `r BiocStyle::CRANpkg("ggplot2")`.
- Filter cells, keeping those with more than 4,500 UMI, less than 15% mitochondrial UMI,
  and more than 1,500 genes detected.

### Bonus

- Similarly, use `scuttle::perFeatureQCMetrics()` or `scuttle::addPerFeatureQC()`
  to compute per-feature quality metrics, and visualise those metrics.

## Bioconductor workflow - Normalisation

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-normalise.png")
```

## Normalisation strategies {.smaller}

The package `r BiocStyle::Biocpkg("scuttle")` hosts methods for the most common and popular normalisation strategies.

### scuttle

- `scuttle::logNormCounts()` computes log-transformed normalized expression values.
  This includes the computation of size factors using `scater::librarySizeFactors()`.
- `scuttle::computePooledFactors` implements the deconvolution strategy from (Lun et al., 2016).

`r NoCite(bib, "lun2016workflow")`

## scran: Deconvoluting size factors from cell pools  {.smaller}

:::: {.columns}

::: {.column width="50%"}
- All cells in the data set are averaged to make a reference pseudo-cell.

- Expression values for cells in pool A are summed together and normalized against the reference to yield a pool-based size factor.

- This is equal to the sum of the cell-based factors and can be used to formulate a linear equation.

- Repeating this for multiple pools leads to the construction of a linear system that can be solved to estimate the size factor for each cell
:::

::: {.column width="50%"}
```{r}
#| fig-align: center
#| out-width: 100%
## Source: https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-0947-7#citeas
knitr::include_graphics("img/scran-fig3.png")
```

::: {style="text-align: right;"}
`r Citet(bib, "lun2016pooling")`
:::
:::
::::

## Exercise

### Normalisation

- Convert the counts into normalized expression values to eliminate cell-specific biases (e.g., in capture efficiency); use `r BiocStyle::Biocpkg("scuttle")`.
  Display the names of the assays available after that step.

### Bonus

- Plot the variance against the mean of each gene.

## Bioconductor workflow - Feature selection

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-variable-features.png")
```

## Feature selection {.smaller}

The package `r BiocStyle::Biocpkg("scran")` provides methods that form a workflow to identify and select features that display a high amount of biological variance.

- `scran::modelGeneVar()` decomposes the log-expression profiles for each gene into technical and biological components based on a fitted mean-variance trend.

- `scran::getTopHVGs()` uses modelling statistics `scran::modelGeneVar()` to define a set of highly variable genes.

## Exercise

### Feature selection

Select features for downstream analyses, e.g. highly variable genes; use `r BiocStyle::Biocpkg("scran")`.

- Use `scran::modelGeneVar()` to model the variance of the log-expression profiles for each gene.
- Use `scran::getTopHVGs()` to identify highly variable genes (e.g., top 10%).

### Bonus

- Visualise the relation between the mean expression of each gene and the total/biological/technical variance of each gene; use `r BiocStyle:::CRANpkg("ggplot2")`.

## Bioconductor workflow - Dimensionality reduction

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-dimensionality.png")
```

## Dimensionality reduction {.smaller}

The packages `r BiocStyle::Biocpkg("scater")`, `r BiocStyle::Biocpkg("scran")`, and `r BiocStyle::Biocpkg("BiocSingular")` provide several common dimensionality reduction methods.

Those include:

:::: {.columns}

::: {.column width="50%"}
- `scater::runPCA()` / `BiocSingular::runPCA()`
- `scran::fixedPCA()`
- `scater::runTSNE()`
- `scater::runUMAP()`
:::

::: {.column width="50%"}
- `BiocSingular::runSVD()`
- `BiocSingular::runExactSVD()`
- `BiocSingular::runIrlbaSVD()`
- `BiocSingular::runRandomSVD()`
:::
::::

### Important notes

- Those methods generally use only a subset most variable features, not the entire dataset.
- By default, `runTSNE()` performs a PCA step first, the result of which the first 50 PCs are used as input for the t-SNE algorithm.
- By default, `runUMAP()` performs a PCA step first, of which the first 50 PCs are used as input into the UMAP algorithm.

## Exercise

### Dimensionality reduction

- Apply PCA; use `scran::fixedPCA()`.
  List the names of dimensionality reduction results available.
- Apply UMAP and t-SNE successively, each time on the output of the PCA.
  List the names of dimensionality reduction results available each time.
- Visualise the scatterplot of cells produced by each of those dimensionality reduction methods.
  Considering coloring points with quality control metrics.

### Bonus point

- Use `scran::denoisePCA()` to remove principal components that correspond to technical noise, and compare downstream t-SNE or UMAP with those obtained before de-noising.

## Bioconductor workflow - Clustering

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-clustering.png")
```

## Clustering {.smaller}

The packages `r BiocStyle::Biocpkg("scran")` and `r BiocStyle::Biocpkg("BiocNeighbors")` provides several methods for clustering single-cell data.
The CRAN package `r BiocStyle::CRANpkg("igraph")` provides powerful methods for graph-based clustering.

- `scran::quickCluster()` clusters similar cells using either log-expression values or ranks.
- `scran::buildSNNGraph()` builds a shared nearest-neighbour graph using cells as nodes.
  For each cell, its $k$ nearest neighbours are identified using the `BiocNeighbors::findKNN()` function, based on distances between their expression profiles (Euclidean by default).
  + The function works on a reduced dimension representation of the dataset, _not_ the gene expression matrix.
  + The output is a graph where nodes are cells and edges represent connections between nearest neighbors.
    To yield clusters, the graph must still be partitioned using an appropriate function, e.g. `igraph::cluster_louvain()`.

### Example

```{r}
#| echo: true
#| eval: false
g <- scran::buildSNNGraph(sce, use.dimred = 'PCA')
colData(sce)[["cluster_louvain"]] <- factor(igraph::cluster_louvain(g)$membership)
```

## Exercise

### Clustering

Cluster cells using `scran`.

- Start with `scran::getClusteredPCs()` to cluster cells after using varying number of PCs, and pick the number of PCs using a heuristic based on the number of clusters.
- Use `scran::buildSNNGraph()` and `igraph::cluster_louvain()` with that "ideal" number of PCs.
  Assign the cluster label to a cell metadata column named `"label"`.
- Visualise the assigned cluster on your preferred dimensionality reduction layout.

::: {.callout-note}
Dimensionality reduction and clustering are two separate methods both based on the PCA coordinates.
They may not always agree with each other, often helping to diagnose over- or under-clustering, as well as parameterisation of dimensionality reduction methods.
:::

### Bonus point

- Test different numbers of principal components and compare results.
- Try `scran::quickCluster()`; identify key parameters and compare results.

## Bioconductor workflow - Cluster markers

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-markers.png")
```

## Identifying cluster markers {.smaller}

The package `r BiocStyle::Biocpkg("scran")` provides several methods for identifying cluster markers.

- `scran::findMarkers()` tests for differential expression between pairs of groups.

- `scran::pairwiseTTests()` performs pairwise Welch t-tests between groups of cells, possibly after blocking on uninteresting factors of variation.
  The return value is a list of `DataFrame` - one for each group of cells - that can be examined separately of combined into a single table using `scran::combineMarkers()`.

- `scran::pairwiseWilcox()` and `scran::pairwiseBinom()` provide alternative statistical tests.

## Exercise

### Cluster markers

- Use `scran::findMarkers()` to identify markers for each cluster.
  Display the metadata of markers for the first cluster.

Visualise the expression of selected markers:

- As a dot plot, optionally with a violin layer.
- On a dimensionality reduction layout.
  Compare with the cluster labels.

## Bioconductor workflow - Interactive visualisation

```{r}
#| fig-align: center
#| out-height: 540px
#| out-width: 400px
## Source: Kevin Rue-Albrecht (Illustrator)
knitr::include_graphics("img/overview-analysis-interactive.png")
```

## iSEE - interactive SummarizedExperiment Explorer

```{r}
#| fig-align: center
#| out-height: 450px
##| out-width: 400px
## Source: https://f1000research.com/articles/7-741
knitr::include_graphics("img/isee-f1000-fig1.gif")
```

## iSEE - interactive SummarizedExperiment Explorer

```{r}
#| echo: true
#| eval: false
library(iSEE)
library(scRNAseq)

# Example data ----
sce <- ReprocessedAllenData(assays="tophat_counts")
class(sce)

library(scater)
sce <- logNormCounts(sce, exprs_values="tophat_counts")

sce <- runPCA(sce, ncomponents=4)
sce <- runTSNE(sce)
rowData(sce)$ave_count <- rowMeans(assay(sce, "tophat_counts"))
rowData(sce)$n_cells <- rowSums(assay(sce, "tophat_counts") > 0)
sce

# launch the app itself ----

app <- iSEE(sce)
shiny::runApp(app, port=1234)
```

## iSEE - interactive SummarizedExperiment Explorer

::: {style="text-align: center;"}
`iSEE(sce, voice=TRUE)`
:::

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/0crFZLwAJOE?autoplay=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 90%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

::: {.notes}
<https://youtu.be/0crFZLwAJOE>
:::

## Exercise

### Interactive visualisation

- Use `iSEE::iSEE()` to launch an interactive web-application to visualise the contents of the `SingleCellExperiment` object.

### Bonus point

- Preconfigure the application to start with a subset of panels, e.g.

```{r}
#| echo: true
#| eval: false
initial_panel_list <- list(
  ReducedDimensionPlot(PanelWidth=4L),
  RowDataTable(PanelWidth=8L)
)
iSEE::iSEE(sce, initial = initial_panel_list)
```

## More single-cell methods available in Bioconductor

### scater

- `r BiocStyle::Biocpkg("scater")` includes a variety of convenient plotting functions (e.g. `scater::plotReducedDim()`, `scater::plotHeatmap()`)

### scran

- `scran::cyclone()` implements the cell cycle classification step of the prediction method described by Scialdone et al. (2015).

### bluster

- `bluster::bootstrapStability()` generates bootstrap replicates and reclusters on them to determine the stability of clusters with respect to sampling noise.

## Further reading

- [Introduction to R / Bioconductor (2016)](https://bioconductor.org/help/course-materials/2016/BiocIntro-May/B1_Bioconductor_Intro.html) by Martin Morgan (Bioconductor Core Team)

- [HarvardX Biomedical Data Science Open Online Training](http://rafalab.github.io/pages/harvardx.html)

## References

```{r}
#| results: asis
PrintBibliography(bib)
```
